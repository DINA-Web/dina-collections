{
  "openapi": "3.0.0",
  "info": {
    "title": "Dina api",
    "contact": {
      "email": "oberg.anton@gmail.com"
    },
    "license": {
      "name": "GNU Affero General Public License",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "version": "0.1.0",
    "description": "This is a first draft of dina api documentation.\nDescriptions like below can be written in markdown:\n\n* [Dina web](https://alpha-cm.dina-web.net/login)\n* [Dina web with mocks](https://alpha-cm-mock.dina-web.net/login)\n* [Dina style guilde](https://alpha-style.dina-web.net)\n",
    "x-versionInfo": "# This is some version specific information\n"
  },
  "servers": [
    {
      "description": "Alpha api server",
      "url": "https://alpha-api.dina-web.net"
    },
    {
      "description": "Auth server",
      "url": "https://alpha-keycloak.dina-web.net"
    },
    {
      "description": "Local api server",
      "url": "http://127.0.0.1:4444"
    },
    {
      "description": "Slim taxonomy",
      "url": "https://alpha-slimtaxonomy.dina-web.net"
    }
  ],
  "tags": [
    {
      "description": "## Api managing agents.\n",
      "name": "agentService"
    },
    {
      "description": "Auth api\n",
      "name": "authService"
    },
    {
      "description": "CuratedEventApi - ex expeditions\n\n",
      "name": "curatedEventService"
    },
    {
      "name": "curatedListService"
    },
    {
      "description": "Api managing externalEvents like loan and acquisitions.\n",
      "name": "externalEventService"
    },
    {
      "description": "Api managing identifiers like catalogNumber.\n",
      "name": "identifierService"
    },
    {
      "description": "Locality Service\n",
      "name": "localityService"
    },
    {
      "description": "Specimens api\n",
      "name": "specimenService"
    },
    {
      "name": "statusService"
    },
    {
      "description": "Service managing storage\n",
      "name": "storageService"
    },
    {
      "description": "Mock taxon api\n",
      "name": "taxonService"
    }
  ],
  "paths": {
    "/api/agent//v01/agents": {
      "post": {
        "operationId": "createAgent",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createAgentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createAgentResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create agent",
        "tags": [
          "agentService"
        ]
      },
      "get": {
        "operationId": "getAgents",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getAgentsResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find agents",
        "tags": [
          "agentService"
        ]
      }
    },
    "/api/agent//v01/agents/{id}": {
      "get": {
        "operationId": "getAgent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "agent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "enum": [
                "primary"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getAgentResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find agent by id",
        "tags": [
          "agentService"
        ]
      },
      "patch": {
        "operationId": "updateAgent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "agent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateAgentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateAgentResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates agent",
        "tags": [
          "agentService"
        ]
      }
    },
    "/auth/realms/dina/protocol/openid-connect/userInfo": {
      "get": {
        "operationId": "getUser",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getUserResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Gets user object",
        "tags": [
          "authService"
        ]
      }
    },
    "/auth/realms/dina/protocol/openid-connect/token": {
      "post": {
        "operationId": "loginUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/loginUserRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/loginUserResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "summary": "Gets user token",
        "tags": [
          "authService"
        ]
      }
    },
    "/api/curatedEvent/v01/expeditions": {
      "post": {
        "operationId": "createExpedition",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createExpeditionRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createExpeditionResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create expedition",
        "tags": [
          "curatedEventService"
        ]
      },
      "get": {
        "operationId": "getExpeditions",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpeditionsResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find expeditions",
        "tags": [
          "curatedEventService"
        ]
      }
    },
    "/api/curatedEvent/v01/expeditions/{id}": {
      "get": {
        "operationId": "getExpedition",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "expedition id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpeditionResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find expedition by id",
        "tags": [
          "curatedEventService"
        ]
      },
      "patch": {
        "operationId": "updateExpedition",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "expedition id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateExpeditionRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateExpeditionResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates expedition",
        "tags": [
          "curatedEventService"
        ]
      }
    },
    "/curatedListApi/v01/distinguishedUnitObservationTypes": {
      "post": {
        "operationId": "createDistinguishedUnitObservationType",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createDistinguishedUnitObservationTypeRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createDistinguishedUnitObservationTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create distinguishedUnitObservationType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "getDistinguishedUnitObservationTypes",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getDistinguishedUnitObservationTypesResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find distinguishedUnitObservationTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/curatedListApi/v01/distinguishedUnitObservationTypes/{id}": {
      "patch": {
        "operationId": "updateDistinguishedUnitObservationType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "distinguishedUnitObservationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateDistinguishedUnitObservationTypeRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateDistinguishedUnitObservationTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates distinguishedUnitObservationType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "getDistinguishedUnitObservationType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "distinguishedUnitObservationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getDistinguishedUnitObservationTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find distinguishedUnitObservationType by id",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/featureObservationTypes": {
      "post": {
        "operationId": "createFeatureObservationType",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createFeatureObservationTypeRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createFeatureObservationTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create featureObservationType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "getFeatureObservationTypes",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getFeatureObservationTypesResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find featureObservationTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/featureObservationTypes/{id}": {
      "patch": {
        "operationId": "updateFeatureObservationType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "featureObservationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateFeatureObservationTypeRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateFeatureObservationTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates featureObservationType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "getFeatureObservationType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "featureObservationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getFeatureObservationTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find featureObservationType by id",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/identifier/v01/catalogNumbers": {
      "post": {
        "operationId": "createCatalogNumber",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createCatalogNumberRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createCatalogNumberResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create catalogNumber",
        "tags": [
          "identifierService"
        ]
      },
      "get": {
        "operationId": "getCatalogNumbers",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getCatalogNumbersResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find catalogNumbers",
        "tags": [
          "identifierService"
        ]
      }
    },
    "/api/identifier/v01/catalogNumbers/{id}": {
      "patch": {
        "operationId": "updateCatalogNumber",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "catalogNumber id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateCatalogNumberRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateCatalogNumberResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates catalogNumber",
        "tags": [
          "identifierService"
        ]
      },
      "get": {
        "operationId": "getCatalogNumber",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "catalogNumber id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getCatalogNumberResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find catalogNumber by id",
        "tags": [
          "identifierService"
        ]
      }
    },
    "/api/locality/v01/curatedLocalities": {
      "post": {
        "operationId": "createCuratedLocality",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createCuratedLocalityRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createCuratedLocalityResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create curatedLocality",
        "tags": [
          "localityService"
        ]
      },
      "get": {
        "operationId": "getCuratedLocalities",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getCuratedLocalitiesResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find curatedLocalities",
        "tags": [
          "localityService"
        ]
      }
    },
    "/api/locality/v01/curatedLocalities/{id}": {
      "patch": {
        "operationId": "updateCuratedLocality",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "curatedLocality id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateCuratedLocalityRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateCuratedLocalityResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates curatedLocality",
        "tags": [
          "localityService"
        ]
      },
      "get": {
        "operationId": "getCuratedLocality",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "curatedLocality id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[descendantLevels]",
            "description": "Levels of descendants to include. Only relevant if relationships descendants provided",
            "example": [
              "country",
              "city"
            ],
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includes",
            "description": "Add includes",
            "example": [
              "descendants",
              "children"
            ],
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "descendants",
                  "children"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Add relationships",
            "example": [
              "descendants",
              "children"
            ],
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "descendants",
                  "children"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getCuratedLocalityResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find curatedLocality by id",
        "tags": [
          "localityService"
        ]
      }
    },
    "/api/specimen/v01/specimens": {
      "post": {
        "operationId": "createSpecimen",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createSpecimenRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createSpecimenResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create specimen",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "getSpecimens",
        "parameters": [
          {
            "in": "query",
            "name": "filter[catalogNumber]",
            "description": "catalog number used to filter specimens",
            "example": "123456",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[identifiedTaxonNameStandardized]",
            "description": "Standardized taxon name used to filter specimens",
            "example": "Chironectes minimus",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimensResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimens",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}": {
      "patch": {
        "operationId": "updateSpecimen",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateSpecimenRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates specimen",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "getSpecimen",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen by id",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/physicalUnits": {
      "patch": {
        "operationId": "updateSpecimenPhysicalUnits",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateSpecimenPhysicalUnitsRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenPhysicalUnitsResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> physicalUnits",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "getSpecimenPhysicalUnits",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenPhysicalUnitsResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> physicalUnits",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/featureObservationTypes": {
      "patch": {
        "operationId": "updateSpecimenFeatureObservationTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateSpecimenFeatureObservationTypesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenFeatureObservationTypesResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> featureObservationTypes",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "getSpecimenFeatureObservationTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenFeatureObservationTypesResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> featureObservationTypes",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/versions/{versionId}": {
      "get": {
        "description": "The id of the returned resource is the versionId and not the ordinary id",
        "operationId": "getSpecimenVersion",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "versionId",
            "description": "specimen versionId",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenVersionResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen version by id and versionId",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/versions": {
      "get": {
        "operationId": "getSpecimenVersions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenVersionsResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimens versions",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/status/v01/status": {
      "get": {
        "operationId": "getStatus",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStatusResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "statusService"
        ]
      }
    },
    "/api/storage/v01/physicalUnits": {
      "post": {
        "operationId": "createPhysicalUnit",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createPhysicalUnitRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createPhysicalUnitResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create physicalUnit",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "getPhysicalUnits",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalUnitsResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalUnits",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalUnits/{id}": {
      "patch": {
        "operationId": "updatePhysicalUnit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalUnit id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updatePhysicalUnitRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePhysicalUnitResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates physicalUnit",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "getPhysicalUnit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalUnit id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalUnitResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalUnit by id",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalUnits/{id}/relationships/storageLocation": {
      "patch": {
        "operationId": "updatePhysicalUnitStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalUnit id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updatePhysicalUnitStorageLocationRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePhysicalUnitStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update physicalUnit -> storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "getPhysicalUnitStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalUnit id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalUnitStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalUnit -> storageLocation",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalUnits/{id}/versions/{versionId}": {
      "get": {
        "description": "The id of the returned resource is the versionId and not the ordinary id",
        "operationId": "getPhysicalUnitVersion",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalUnit id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "versionId",
            "description": "physicalUnit versionId",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalUnitVersionResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalUnit version by id and versionId",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalUnits/{id}/versions": {
      "get": {
        "operationId": "getPhysicalUnitVersions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalUnit id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalUnitVersionsResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalUnits versions",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations": {
      "post": {
        "operationId": "createStorageLocation",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createStorageLocationRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "getStorageLocations",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocationsResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocations",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/{id}": {
      "patch": {
        "operationId": "updateStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateStorageLocationRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "getStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocation by id",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/{id}/relationships/physicalUnits": {
      "get": {
        "operationId": "getStorageLocationPhysicalUnits",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocationPhysicalUnitsResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocation -> physicalUnits",
        "tags": [
          "storageService"
        ]
      }
    },
    "/taxon/{id}": {
      "get": {
        "operationId": "getTaxonById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[name]",
            "description": "Taxon name - accepted scientific, synonym or vernacular name",
            "example": "Alces alces",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "search_type",
            "description": "Search type - exact (default) or partial",
            "example": "exact",
            "required": false,
            "schema": {
              "enum": [
                "exact",
                "partial"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getTaxonByIdResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon by id",
        "tags": [
          "taxonService"
        ]
      }
    },
    "/taxon": {
      "get": {
        "operationId": "getTaxaByName",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": "false",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getTaxaByNameResponse"
                }
              }
            },
            "description": "this is a desc"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon",
        "tags": [
          "taxonService"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "agent": {
        "additionalProperties": false,
        "description": "WIP",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "x-category": "agentApi",
        "x-modelType": "model"
      },
      "date": {
        "additionalProperties": false,
        "properties": {
          "isoDate": {
            "type": "string",
            "description": "A date in standard format. TBA"
          },
          "dateText": {
            "type": "string",
            "example": "Before 1800"
          },
          "day": {
            "type": "integer",
            "example": 25
          },
          "month": {
            "type": "integer",
            "example": 12
          },
          "year": {
            "type": "integer",
            "example": 1981
          }
        },
        "description": "### Definition\n\nInformation pertaining to a specific date or a date range.\n\n### Note(s)\n\nIncludes for example verbatim information about when something happened.\n",
        "x-category": "core",
        "x-modelType": "model"
      },
      "externalModelReference": {
        "additionalProperties": false,
        "description": "A reference to a model owned by another service",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "x-category": "core",
        "x-modelType": "model"
      },
      "internalModelReference": {
        "additionalProperties": false,
        "description": "A reference to a model owned by the same service but stored in normalized form",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "uuid",
          "type"
        ],
        "x-category": "core",
        "x-modelType": "model"
      },
      "modelReference": {
        "additionalProperties": false,
        "description": "A reference to a model",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model"
      },
      "notDefinedModel": {
        "additionalProperties": true,
        "description": "A model to be used until proper concept is defined",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model"
      },
      "polygon": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "vertices": {
            "type": "array",
            "description": "Corners of the polygon in sane format"
          }
        },
        "x-category": "core",
        "x-modelType": "model"
      },
      "position": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude or northing. Use negative number or letter S for coordinates on southern hemisphere."
          },
          "longitude": {
            "type": "string",
            "description": "Latitude or easting. Use negative number or letter W for coordinates on western hemisphere."
          },
          "geodeticDatum": {
            "type": "string",
            "description": "Geodetic datum wip"
          },
          "uncertaintyInMeters": {
            "type": "integer",
            "description": "Coordinate uncertainty in meters"
          }
        },
        "x-required": [
          "name",
          "id",
          "description",
          "type"
        ],
        "x-category": "core",
        "x-modelType": "model"
      },
      "verticalPosition": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "maximumDepthInMeters": {
            "type": "integer",
            "description": "Max depth (m)"
          },
          "maximumElevationInMeters": {
            "type": "integer",
            "description": "Max elevation (m)"
          },
          "minimumDepthInMeters": {
            "type": "integer",
            "description": "Min depth (m)"
          },
          "minimumElevationInMeters": {
            "type": "integer",
            "description": "Min elevation (m)"
          }
        },
        "x-required": [
          "name",
          "id",
          "description",
          "type"
        ],
        "x-category": "core",
        "x-modelType": "model"
      },
      "curatedEvent": {
        "additionalProperties": false,
        "description": "### Definition\n\nA defined event with known extension in time and space.\n\n\n\n",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "x-category": "curatedEventApi",
        "x-modelType": "model"
      },
      "expedition": {
        "additionalProperties": false,
        "description": "tba",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "x-category": "curatedEventApi",
        "x-modelType": "model"
      },
      "curatedList": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "featureObservationType",
              "distinguishedUnitObservationType"
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/curatedListType"
            }
          }
        },
        "x-category": "curatedListApi",
        "x-modelType": "model",
        "description": ""
      },
      "curatedListType": {
        "additionalProperties": false,
        "properties": {
          "item": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/featureObservationType"
              },
              {
                "$ref": "#/components/schemas/distinguishedUnitObservationType"
              }
            ]
          }
        },
        "x-category": "curatedListApi",
        "x-modelType": "model",
        "description": ""
      },
      "distinguishedUnitObservationType": {
        "additionalProperties": false,
        "properties": {
          "typeName": {
            "type": "string",
            "enum": [
              "sex",
              "length",
              "age",
              "weight",
              "conditionAtCollecting",
              "ageStage"
            ]
          },
          "id": {
            "type": "string",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6"
            ]
          }
        },
        "required": [
          "typeName"
        ],
        "x-category": "curatedListApi",
        "x-modelType": "model",
        "description": ""
      },
      "featureObservationType": {
        "additionalProperties": false,
        "properties": {
          "typeName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "typeName"
        ],
        "description": "### Definition\n\nThe type of FeatureObservation. Will likely be a currated list\n\n### Example(s)\n\nSex\n",
        "x-category": "curatedListApi",
        "x-modelType": "model"
      },
      "catalogNumber": {
        "type": "object",
        "properties": {
          "identifierType": {
            "type": "string",
            "pattern": "catalogNumber"
          },
          "nameSpace": {
            "type": "string",
            "example": "mammal"
          },
          "value": {
            "type": "string",
            "description": "Catalog number is a string of 6 or 8 digits",
            "pattern": "^$|^[0-9]{6}$|^[0-9]{8}$",
            "example": "584028"
          }
        },
        "description": "### Definition\n\nA unique identifier for a unit within a catalog.\n",
        "x-category": "identifierApi",
        "x-modelType": "model"
      },
      "identifier": {
        "additionalProperties": false,
        "properties": {
          "publishRecord": {
            "type": "boolean"
          },
          "remarks": {
            "type": "string",
            "example": "Some remarks"
          },
          "identifier": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/catalogNumber"
              }
            ]
          }
        },
        "description": "### Definition\n\nTba\n",
        "x-category": "identifierApi",
        "x-modelType": "model"
      },
      "curatedLocality": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the locality"
          },
          "versionId": {
            "type": "string",
            "description": "Id of the specific version"
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp corresponding to when created"
          },
          "createdBy": {
            "type": "string",
            "description": "Some kind of reference to the individual that created the locality"
          },
          "updatedBy": {
            "type": "string",
            "description": "Some kind of reference to the individual that updated/created the specific version"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp corresponding to when updated. Could be called versionCreatedAt"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier that is consistent over time"
          },
          "description": {
            "type": "string",
            "description": "Description of the locality"
          },
          "type": {
            "type": "string",
            "description": "Type of locality",
            "enum": [
              "continent",
              "country",
              "district",
              "geodeticDatum",
              "locality",
              "province",
              "rubin"
            ]
          },
          "centralPosition": {
            "type": "object",
            "description": "A position describing the center",
            "$ref": "#/components/schemas/position"
          },
          "parent": {
            "type": "object",
            "description": "A polygon describing the edges",
            "$ref": "#/components/schemas/curatedLocality"
          },
          "polygon": {
            "type": "object",
            "description": "A polygon describing the edges",
            "$ref": "#/components/schemas/polygon"
          },
          "verticalPosition": {
            "description": "A vertical position",
            "type": "object",
            "$ref": "#/components/schemas/verticalPosition"
          }
        },
        "x-required": [
          "name",
          "id",
          "description",
          "type"
        ],
        "description": "### Definition\n\nA defined location with known extension in space.\n",
        "x-category": "localityApi",
        "x-modelType": "model"
      },
      "curatedLocalityRelation": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "to": {
            "$ref": "#/components/schemas/curatedLocality"
          },
          "from": {
            "$ref": "#/components/schemas/curatedLocality"
          },
          "type": {
            "type": "string"
          }
        },
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "x-category": "localityApi",
        "x-modelType": "model"
      },
      "collectingCircumstance": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector"
          },
          "event": {
            "$ref": "#/components/schemas/event"
          }
        },
        "description": "### Definition\n\nThe context under which some specific material was collected.\n\n### Note(s)\n\nThis includes collecting information of various kinds, for example collector(s) and collecting method.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "collectingEvent": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector"
          },
          "startDate": {
            "$ref": "#/components/schemas/date"
          },
          "endDate": {
            "$ref": "#/components/schemas/date"
          },
          "expeditionText": {
            "type": "string",
            "example": "Vega Expedition"
          },
          "localityInformation": {
            "$ref": "#/components/schemas/localityInformation"
          }
        },
        "x-category": "specimenApi",
        "x-modelType": "model",
        "description": ""
      },
      "deathCircumstance": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector"
          }
        },
        "description": "### Definition\n\nInformation about the death of an individual or group of individuals.\n\n### Note(s)\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "determination": {
        "additionalProperties": false,
        "properties": {
          "remarks": {
            "type": "string",
            "example": "Some remarks"
          },
          "determinationText": {
            "type": "string",
            "example": "Sorex minutus, by Doe, J. on 1982-01-01"
          },
          "determinationVerbatim": {
            "type": "string",
            "description": "In exactly the same words as were used originally"
          },
          "determinedByAgentText": {
            "type": "string",
            "example": "Doe, J."
          },
          "date": {
            "$ref": "#/components/schemas/date"
          },
          "taxonNameStandardized": {
            "type": "string",
            "description": "Should be a taxon reference",
            "example": "Chironectes minimus"
          },
          "taxon": {
            "$ref": "#/components/schemas/individualGroup"
          },
          "isCurrentDetermination": {
            "type": "boolean",
            "example": true
          }
        },
        "description": "### Definition\n\nA statement about a specimen's taxon name and/or type status, which is not itself a type status designation.\n\n### Note(s)\n\nA type status designation is understood here as an explicit or implicit designation of a new type status for a specimen with respect to a taxon name. A type status designation is made in a publication and is strictly regulated by a nomenclatural code. A taxonomic identification on the other hand is usually written on a label attached to a specimen, but could also be found in e.g. a publication or in a notebook stored at a different location.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "distinguishedUnit": {
        "additionalProperties": false,
        "properties": {
          "alternateIdentifiersText": {
            "type": "string",
            "example": "Skin complete, prepared"
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identifier"
            }
          },
          "collectingCircumstance": {
            "$ref": "#/components/schemas/collectingCircumstance"
          },
          "id": {
            "type": "string"
          },
          "physicalUnitText": {
            "type": "string",
            "example": "Skin complete, prepared"
          },
          "physicalUnit": {
            "$ref": "#/components/schemas/physicalUnit"
          }
        },
        "description": "### Definition\n\nThe smallest recognized ”thing” in the collection. This may be a physical object or part of a physical object.\n\n### Example(s)\n\n* A skin prepared from a squirrel.\n* One fish in a jar with five fishes.\n* All fishes in a jar with five fishes.\n* A moss and a lichen attached to the same piece of bark may be recognized as two identifiable units.\n\n### Note(s)\n\nThis should probably be renamed \"distinguishedUnit\".\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "distinguishedUnitObservations": {
        "additionalProperties": false,
        "properties": {
          "agent": {
            "type": "string",
            "example": "Doe, J."
          },
          "date": {
            "$ref": "#/components/schemas/date"
          },
          "observationText": {
            "type": "string",
            "example": "10 years"
          },
          "observationType": {
            "$ref": "#/components/schemas/distinguishedUnitObservationType"
          },
          "methodText": {
            "type": "string",
            "example": "Known age"
          }
        },
        "x-category": "specimenApi",
        "x-modelType": "model",
        "description": ""
      },
      "event": {
        "additionalProperties": false,
        "properties": {
          "startDate": {
            "$ref": "#/components/schemas/date"
          },
          "endDate": {
            "$ref": "#/components/schemas/date"
          },
          "expeditionText": {
            "type": "string",
            "example": "Vega Expedition"
          },
          "localityInformation": {
            "$ref": "#/components/schemas/localityInformation"
          }
        },
        "description": "### Definition\n\nAn activity or occurrence at a particular time and location.\n\n### Note(s)\n\n\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "featureObservation": {
        "additionalProperties": false,
        "properties": {
          "featureObservationAgent": {
            "type": "string",
            "example": "Doe, J."
          },
          "date": {
            "$ref": "#/components/schemas/date"
          },
          "featureObservationText": {
            "type": "string",
            "example": "10 years"
          },
          "featureObservationType": {
            "$ref": "#/components/schemas/featureObservationType"
          },
          "methodText": {
            "type": "string",
            "example": "Known age"
          }
        },
        "description": "### Definition\n\nThe data measured, collected, perceived or noticed for some property by an agent (e.g. a person or a machine) during a single event.\n\n### Example(s)\n\nWhen a curator measures the wingspan and the weight of a bird, this counts as two separate observations.\n\n### Note(s)\n\nThe kinds of data for the observation is determined by its FeatureObservationType.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "individualCircumstance": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector"
          },
          "event": {
            "$ref": "#/components/schemas/event"
          },
          "specificCircumstance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/originCircumstance"
              },
              {
                "$ref": "#/components/schemas/observationCircumstance"
              },
              {
                "$ref": "#/components/schemas/deathCircumstance"
              }
            ]
          }
        },
        "description": "### Definition\n\nThe context for the participation of an individual in a particular event.\n\n### Note(s)\n\nThis is a container for information about e.g. death, origin and observations of the individual (or group of individuals). Circumstances for the collecting event are handled separately (see collectingCircumstance).\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "individualGroup": {
        "additionalProperties": false,
        "description": "### Definition\n\nOne or more individuals with a single set of individual characteristics.\n\n### Example(s)\n\n* A specific squirrel represented by both a skin and a tissue sample in a collection.\n* Three fishes in a jar of alcohol, coming from the same collecting event and representing the same taxon may be treated as a single group of individuals.\n\n### Note(s)\n\nIndividual is understod in a broad sense and should be applied within its context. Thus, it should be possible to talk about individuals in for example a mineralogical collection.\n\nThis should perhaps be renamed \"individualOrGroup\" or just \"individual\".\n",
        "properties": {
          "taxonInformation": {
            "type": "object",
            "$ref": "#/components/schemas/taxonInformation"
          },
          "individualCircumstances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/individualCircumstance"
            }
          },
          "featureObservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureObservation"
            }
          },
          "id": {
            "type": "string"
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identifier"
            }
          },
          "distinguishedUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/distinguishedUnit"
            }
          },
          "version": {
            "type": "integer"
          }
        },
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "localityInformation": {
        "additionalProperties": false,
        "properties": {
          "curatedLocalities": {
            "description": "An array with curated localities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/curatedLocality"
            }
          },
          "position": {
            "type": "object",
            "$ref": "#/components/schemas/position"
          },
          "polygon": {
            "type": "object",
            "$ref": "#/components/schemas/polygon"
          },
          "verticalPosition": {
            "type": "object",
            "$ref": "#/components/schemas/verticalPosition"
          },
          "coordinatesVerbatim": {
            "type": "string",
            "description": "Verbatim coordinates (or corresponding information, e.g. map number) from the original source"
          },
          "georeferenceSourcesText": {
            "type": "string",
            "description": "Describe how you got the georeferenced coordinates (data source(s), tools, maps ...)"
          },
          "localityText": {
            "type": "string",
            "description": "TBA"
          },
          "remarks": {
            "type": "string",
            "description": "Notes on the locality"
          },
          "localityVerbatim": {
            "type": "string",
            "description": "Verbatim locality names and description, as in the original source, typos and all."
          }
        },
        "description": "### Definition\n\nInformation pertaining to a specific location.\n\n### Note(s)\n\nIncludes for example verbatim information about a location.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "observationCircumstance": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector"
          }
        },
        "description": "### Definition\n\nInformation about an observation of an individual or group of individuals.\n\n### Note(s)\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "originCircumstance": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector"
          }
        },
        "description": "### Definition\n\nInformation about the origin of an individual or group of individuals.\n\n### Note(s)\n\nThis can for example involve the genetic origin or a specific event when an individual moved from an place to another.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "specimen": {
        "additionalProperties": false,
        "description": "This is a description",
        "properties": {
          "individualGroup": {
            "$ref": "#/components/schemas/individualGroup"
          },
          "distinguishedUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/distinguishedUnit"
            }
          },
          "id": {
            "type": "string"
          },
          "individualCircumstances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/individualCircumstance"
            }
          },
          "collectingCircumstances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectingCircumstance"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          },
          "version": {
            "type": "integer"
          }
        },
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "taxonInformation": {
        "additionalProperties": false,
        "properties": {
          "curatorialName": {
            "type": "string"
          },
          "determinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/determination"
            }
          }
        },
        "description": "### Definition\n\nThe taxon to which an individualGroup is currently assigned according to a local classification.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "physicalUnit": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "distinguishedUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/distinguishedUnit"
            }
          },
          "normalStorageLocationText": {
            "description": "Will be moved to storageLocation",
            "type": "string"
          },
          "storedUnderTaxonName": {
            "description": "Will be moved to storageLocation",
            "type": "string",
            "example": "Sorex minutus"
          },
          "storageLocation": {
            "$ref": "#/components/schemas/storageLocation"
          }
        },
        "description": "### Definition\n\nThe smallest recognized physical “thing” in the collection. A set of identifiable units. One or more.\n\n### Example(s)\n\nEx.1. A herbarium sheet with multiple leafs (many identifiable units)\nEx.2. A device where a skin is mounted at (one identifiable unit)\nEx.3. A device where a stone with a moss is mounted (two identifiable unit)\n",
        "x-category": "storageApi",
        "x-modelType": "model"
      },
      "storageLocation": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "locationText": {
            "type": "string"
          }
        },
        "description": "### Definition\n\nA delimited space in the collection where one ore more physical units can be placed.\n",
        "x-category": "storageApi",
        "x-modelType": "model"
      },
      "storageLocationRelation": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "to": {
            "$ref": "#/components/schemas/storageLocation"
          },
          "from": {
            "$ref": "#/components/schemas/storageLocation"
          },
          "type": {
            "type": "string"
          }
        },
        "x-category": "storageApi",
        "x-modelType": "model",
        "description": ""
      },
      "taxon": {
        "additionalProperties": false,
        "properties": {
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Parent taxon identifier"
              },
              "scientific_name": {
                "type": "string",
                "description": "Parent taxon scientific name"
              },
              "rank": {
                "type": "string",
                "description": "Parent taxon rank"
              }
            },
            "required": [
              "id",
              "scientific_name",
              "rank"
            ]
          },
          "rubin_number": {
            "type": "string",
            "description": "Rubin storage number for the taxon"
          },
          "higherTaxa": {
            "type": "object",
            "properties": {
              "order": {
                "type": "string",
                "description": "Parent order"
              },
              "suborder": {
                "type": "string",
                "description": "Parent suborder"
              },
              "infraorder": {
                "type": "string",
                "description": "Parent infraorder"
              },
              "superfamily": {
                "type": "string",
                "description": "Parent superfamily"
              },
              "family": {
                "type": "string",
                "description": "Parent family"
              },
              "subfamily": {
                "type": "string",
                "description": "Parent subfamily"
              },
              "tribe": {
                "type": "string",
                "description": "Parent tribe"
              },
              "genus": {
                "type": "string",
                "description": "Parent genus"
              },
              "subgenus": {
                "type": "string",
                "description": "Parent subgenus"
              }
            }
          },
          "rank": {
            "type": "string",
            "description": "Taxon rank"
          },
          "scientific_name": {
            "type": "string",
            "description": "Taxon scientific name, binomial if species"
          },
          "author": {
            "type": "string",
            "description": "Taxon author without the year"
          },
          "author_date": {
            "type": "string",
            "description": "Taxon author year"
          },
          "valid_name": {
            "type": "boolean",
            "description": "Is the name taxonomically valid",
            "default": false
          },
          "vernacular_names": {
            "type": "object",
            "properties": {
              "en": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Vernacular (common) English names for the taxon"
                }
              }
            }
          },
          "synonyms": {
            "type": "string",
            "description": "List of synonyms as free-form text"
          },
          "sort_order": {
            "type": "string",
            "description": "Taxonomical sort order code from Mammal Species of the World list"
          }
        },
        "required": [
          "rank",
          "scientific_name",
          "valid_name"
        ],
        "x-category": "taxonomyApi",
        "x-modelType": "model",
        "description": ""
      },
      "createAgentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "agent",
                "enum": [
                  "agent"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/agent"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "agent",
              "attributes": {
                "name": "orvar"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "agent",
            "attributes": {
              "name": "orvar"
            }
          }
        },
        "description": ""
      },
      "updateAgentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "agent",
                "enum": [
                  "agent"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/agent"
              }
            }
          }
        },
        "description": ""
      },
      "loginUserRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "client_id": {
            "type": "string",
            "example": "dina-reset"
          },
          "grant_type": {
            "type": "string",
            "example": "password"
          },
          "password": {
            "type": "string",
            "example": "xxxxx"
          },
          "username": {
            "type": "string",
            "example": "john doe"
          }
        },
        "required": [
          "client_id",
          "grant_type",
          "password",
          "username"
        ],
        "description": ""
      },
      "createExpeditionRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "expedition",
                "enum": [
                  "expedition"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/expedition"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "expedition",
              "attributes": {}
            }
          }
        },
        "example": {
          "data": {
            "type": "expedition",
            "attributes": {}
          }
        },
        "description": ""
      },
      "updateExpeditionRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "expedition",
                "enum": [
                  "expedition"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/expedition"
              }
            }
          }
        },
        "description": ""
      },
      "createDistinguishedUnitObservationTypeRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "distinguishedUnitObservationType",
                "enum": [
                  "distinguishedUnitObservationType"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/distinguishedUnitObservationType"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "distinguishedUnitObservationType",
              "attributes": {
                "typeName": "sex"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "distinguishedUnitObservationType",
            "attributes": {
              "typeName": "sex"
            }
          }
        },
        "description": ""
      },
      "updateDistinguishedUnitObservationTypeRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "distinguishedUnitObservationType",
                "enum": [
                  "distinguishedUnitObservationType"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/distinguishedUnitObservationType"
              }
            }
          }
        },
        "description": ""
      },
      "createFeatureObservationTypeRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "featureObservationType",
                "enum": [
                  "featureObservationType"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/featureObservationType"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "id": "1234",
              "type": "featureObservationType",
              "attributes": {
                "typeName": "string"
              }
            }
          }
        },
        "example": {
          "data": {
            "id": "1234",
            "type": "featureObservationType",
            "attributes": {
              "typeName": "string"
            }
          }
        },
        "description": ""
      },
      "updateFeatureObservationTypeRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "featureObservationType",
                "enum": [
                  "featureObservationType"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/featureObservationType"
              }
            }
          }
        },
        "description": ""
      },
      "createCatalogNumberRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "catalogNumber",
                "enum": [
                  "catalogNumber"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/catalogNumber"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "id": "1234",
              "type": "catalogNumber",
              "attributes": {
                "identifierType": "catalogNumber",
                "nameSpace": "mammal",
                "value": "58412812"
              }
            }
          }
        },
        "example": {
          "data": {
            "id": "1234",
            "type": "catalogNumber",
            "attributes": {
              "identifierType": "catalogNumber",
              "nameSpace": "mammal",
              "value": "58412812"
            }
          }
        },
        "description": ""
      },
      "updateCatalogNumberRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "catalogNumber",
                "enum": [
                  "catalogNumber"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/catalogNumber"
              }
            }
          }
        },
        "description": ""
      },
      "createCuratedLocalityRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "curatedLocality",
                "enum": [
                  "curatedLocality"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/curatedLocality"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "curatedLocality"
                              ],
                              "example": "curatedLocality",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "descendants": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "curatedLocality"
                              ],
                              "example": "curatedLocality",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "curatedLocality"
                                ],
                                "example": "curatedLocality",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "curatedLocality",
              "attributes": {
                "name": "string",
                "versionId": "string",
                "createdAt": "string",
                "createdBy": "string",
                "updatedBy": "string",
                "updatedAt": "string",
                "description": "string",
                "centralPosition": {
                  "latitude": "string",
                  "longitude": "string",
                  "geodeticDatum": "string",
                  "uncertaintyInMeters": 0
                },
                "verticalPosition": {
                  "maximumDepthInMeters": 0,
                  "maximumElevationInMeters": 0,
                  "minimumDepthInMeters": 0,
                  "minimumElevationInMeters": 0
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "curatedLocality",
            "attributes": {
              "name": "string",
              "versionId": "string",
              "createdAt": "string",
              "createdBy": "string",
              "updatedBy": "string",
              "updatedAt": "string",
              "description": "string",
              "centralPosition": {
                "latitude": "string",
                "longitude": "string",
                "geodeticDatum": "string",
                "uncertaintyInMeters": 0
              },
              "verticalPosition": {
                "maximumDepthInMeters": 0,
                "maximumElevationInMeters": 0,
                "minimumDepthInMeters": 0,
                "minimumElevationInMeters": 0
              }
            }
          }
        },
        "description": ""
      },
      "updateCuratedLocalityRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "curatedLocality",
                "enum": [
                  "curatedLocality"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/curatedLocality"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "curatedLocality"
                              ],
                              "example": "curatedLocality",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "descendants": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "curatedLocality"
                              ],
                              "example": "curatedLocality",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "curatedLocality"
                                ],
                                "example": "curatedLocality",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "description": ""
      },
      "createSpecimenRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "specimen",
                "enum": [
                  "specimen"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "relationships": {
                "properties": {
                  "featureObservationTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureObservationType"
                              ],
                              "example": "featureObservationType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalUnits": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalUnit"
                              ],
                              "example": "physicalUnit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-examples": {
          "fullFormExample": {
            "data": {
              "type": "specimen",
              "relationships": {
                "physicalUnits": {
                  "data": [
                    {
                      "id": "2234",
                      "type": "physicalUnit"
                    }
                  ]
                },
                "featureObservationTypes": {
                  "data": [
                    {
                      "id": "1",
                      "type": "featureObservationType"
                    }
                  ]
                }
              },
              "attributes": {
                "individualGroup": {
                  "taxonInformation": {
                    "determinations": [
                      {
                        "date": "date",
                        "determinationVerbatim": "determinationVerbatim",
                        "determinedByAgentText": "determinedByAgentText",
                        "isCurrentDetermination": true,
                        "remarks": "remarks",
                        "taxonNameStandardized": "Sorex minutus"
                      }
                    ]
                  },
                  "featureObservations": [
                    {
                      "date": "date",
                      "featureObservationAgent": "featureObservationAgent",
                      "featureObservationText": "21",
                      "featureObservationType": {
                        "id": "1",
                        "type": "featureObservationType"
                      },
                      "methodText": "methodText"
                    }
                  ],
                  "distinguishedUnits": [
                    {
                      "alternateIdentifiersText": "alternateIdentifiersText",
                      "physicalUnit": {
                        "id": "2234",
                        "type": "physicalUnit"
                      },
                      "physicalUnitText": "physicalUnitText"
                    }
                  ],
                  "identifiers": [
                    {
                      "identifier": {
                        "identifierType": "catalogNumber",
                        "nameSpace": "",
                        "value": "123456"
                      },
                      "publishRecord": true,
                      "remarks": ""
                    }
                  ],
                  "individualCircumstances": [
                    {
                      "collectorsText": "collectorsText",
                      "event": {
                        "endDate": "endDate",
                        "expeditionText": "expeditionText",
                        "localityInformation": {
                          "coordinatesVerbatim": "coordinatesVerbatim",
                          "curatedLocalities": [
                            {
                              "id": "Africa",
                              "type": "continent"
                            },
                            {
                              "id": "Algeria",
                              "type": "country"
                            },
                            {
                              "id": "Balearic Islands",
                              "type": "province"
                            },
                            {
                              "id": "GaspÃ© Peninsula",
                              "type": "district"
                            },
                            {
                              "id": "Skansen",
                              "type": "locality"
                            }
                          ],
                          "georeferenceSourcesText": "georeferenceSourcesText",
                          "localityVerbatim": "localityVerbatim",
                          "position": {
                            "geodeticDatum": "geodeticDatum text",
                            "latitude": "latitude-string",
                            "longitude": "longitude-string",
                            "uncertaintyInMeters": 10
                          },
                          "remarks": "remarks",
                          "verticalPosition": {
                            "maximumDepthInMeters": 100,
                            "maximumElevationInMeters": 100,
                            "minimumDepthInMeters": 20,
                            "minimumElevationInMeters": 20
                          }
                        },
                        "startDate": "startDate"
                      }
                    }
                  ]
                }
              }
            }
          },
          "primary": {
            "data": {
              "type": "specimen",
              "relationships": {
                "physicalUnits": {
                  "data": [
                    {
                      "id": "2234",
                      "type": "physicalUnit"
                    }
                  ]
                },
                "featureObservationTypes": {
                  "data": [
                    {
                      "id": "2",
                      "type": "featureObservationType"
                    }
                  ]
                }
              },
              "attributes": {
                "individualGroup": {
                  "taxonInformation": {},
                  "individualCircumstances": [
                    {
                      "id": "string",
                      "collectorsText": "Bergström, U",
                      "event": {
                        "startDate": {
                          "isoDate": "string",
                          "dateText": "Before 1800",
                          "day": 25,
                          "month": 12,
                          "year": 1981
                        },
                        "endDate": {
                          "isoDate": "string",
                          "dateText": "Before 1800",
                          "day": 25,
                          "month": 12,
                          "year": 1981
                        },
                        "expeditionText": "Vega Expedition",
                        "localityInformation": {
                          "curatedLocalities": [
                            {
                              "name": "string",
                              "versionId": "string",
                              "createdAt": "string",
                              "createdBy": "string",
                              "updatedBy": "string",
                              "updatedAt": "string",
                              "id": "string",
                              "description": "string",
                              "type": "continent",
                              "centralPosition": {
                                "latitude": "string",
                                "longitude": "string",
                                "geodeticDatum": "string",
                                "uncertaintyInMeters": 0
                              },
                              "polygon": {
                                "vertices": [
                                  null
                                ]
                              },
                              "verticalPosition": {
                                "maximumDepthInMeters": 0,
                                "maximumElevationInMeters": 0,
                                "minimumDepthInMeters": 0,
                                "minimumElevationInMeters": 0
                              }
                            }
                          ],
                          "position": {
                            "latitude": "string",
                            "longitude": "string",
                            "geodeticDatum": "string",
                            "uncertaintyInMeters": 0
                          },
                          "polygon": {
                            "vertices": [
                              null
                            ]
                          },
                          "verticalPosition": {
                            "maximumDepthInMeters": 0,
                            "maximumElevationInMeters": 0,
                            "minimumDepthInMeters": 0,
                            "minimumElevationInMeters": 0
                          },
                          "coordinatesVerbatim": "string",
                          "georeferenceSourcesText": "string",
                          "localityText": "string",
                          "remarks": "string",
                          "localityVerbatim": "string"
                        }
                      }
                    }
                  ],
                  "featureObservations": [
                    {
                      "featureObservationAgent": "Doe, J.",
                      "date": {
                        "isoDate": "string",
                        "dateText": "Before 1800",
                        "day": 25,
                        "month": 12,
                        "year": 1981
                      },
                      "featureObservationText": "10 years",
                      "featureObservationType": {
                        "id": "2",
                        "type": "featureObservationType"
                      },
                      "methodText": "Known age"
                    }
                  ],
                  "id": "string",
                  "identifiers": [
                    {
                      "identifier": {
                        "identifierType": "catalogNumber",
                        "nameSpace": "",
                        "value": "123456"
                      },
                      "publishRecord": true,
                      "remarks": "Some remarks"
                    }
                  ],
                  "distinguishedUnits": [
                    {
                      "alternateIdentifiersText": "Skin complete, prepared",
                      "identifiers": [
                        {
                          "publishRecord": true,
                          "remarks": "Some remarks"
                        }
                      ],
                      "collectingCircumstance": {
                        "id": "string",
                        "collectorsText": "Bergström, U",
                        "event": {
                          "startDate": {
                            "isoDate": "string",
                            "dateText": "Before 1800",
                            "day": 25,
                            "month": 12,
                            "year": 1981
                          },
                          "endDate": {
                            "isoDate": "string",
                            "dateText": "Before 1800",
                            "day": 25,
                            "month": 12,
                            "year": 1981
                          },
                          "expeditionText": "Vega Expedition",
                          "localityInformation": {
                            "position": {
                              "latitude": "string",
                              "longitude": "string",
                              "geodeticDatum": "string",
                              "uncertaintyInMeters": 0
                            },
                            "polygon": {
                              "vertices": [
                                null
                              ]
                            },
                            "verticalPosition": {
                              "maximumDepthInMeters": 0,
                              "maximumElevationInMeters": 0,
                              "minimumDepthInMeters": 0,
                              "minimumElevationInMeters": 0
                            },
                            "coordinatesVerbatim": "string",
                            "georeferenceSourcesText": "string",
                            "localityText": "string",
                            "remarks": "string",
                            "localityVerbatim": "string"
                          }
                        }
                      },
                      "id": "string",
                      "physicalUnitText": "Skin complete, prepared",
                      "physicalUnit": {
                        "id": "2234",
                        "type": "physicalUnit"
                      }
                    }
                  ],
                  "version": 0
                },
                "version": 0
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "specimen",
            "relationships": {
              "physicalUnits": {
                "data": [
                  {
                    "id": "2234",
                    "type": "physicalUnit"
                  }
                ]
              },
              "featureObservationTypes": {
                "data": [
                  {
                    "id": "2",
                    "type": "featureObservationType"
                  }
                ]
              }
            },
            "attributes": {
              "individualGroup": {
                "taxonInformation": {},
                "individualCircumstances": [
                  {
                    "id": "string",
                    "collectorsText": "Bergström, U",
                    "event": {
                      "startDate": {
                        "isoDate": "string",
                        "dateText": "Before 1800",
                        "day": 25,
                        "month": 12,
                        "year": 1981
                      },
                      "endDate": {
                        "isoDate": "string",
                        "dateText": "Before 1800",
                        "day": 25,
                        "month": 12,
                        "year": 1981
                      },
                      "expeditionText": "Vega Expedition",
                      "localityInformation": {
                        "curatedLocalities": [
                          {
                            "name": "string",
                            "versionId": "string",
                            "createdAt": "string",
                            "createdBy": "string",
                            "updatedBy": "string",
                            "updatedAt": "string",
                            "id": "string",
                            "description": "string",
                            "type": "continent",
                            "centralPosition": {
                              "latitude": "string",
                              "longitude": "string",
                              "geodeticDatum": "string",
                              "uncertaintyInMeters": 0
                            },
                            "polygon": {
                              "vertices": [
                                null
                              ]
                            },
                            "verticalPosition": {
                              "maximumDepthInMeters": 0,
                              "maximumElevationInMeters": 0,
                              "minimumDepthInMeters": 0,
                              "minimumElevationInMeters": 0
                            }
                          }
                        ],
                        "position": {
                          "latitude": "string",
                          "longitude": "string",
                          "geodeticDatum": "string",
                          "uncertaintyInMeters": 0
                        },
                        "polygon": {
                          "vertices": [
                            null
                          ]
                        },
                        "verticalPosition": {
                          "maximumDepthInMeters": 0,
                          "maximumElevationInMeters": 0,
                          "minimumDepthInMeters": 0,
                          "minimumElevationInMeters": 0
                        },
                        "coordinatesVerbatim": "string",
                        "georeferenceSourcesText": "string",
                        "localityText": "string",
                        "remarks": "string",
                        "localityVerbatim": "string"
                      }
                    }
                  }
                ],
                "featureObservations": [
                  {
                    "featureObservationAgent": "Doe, J.",
                    "date": {
                      "isoDate": "string",
                      "dateText": "Before 1800",
                      "day": 25,
                      "month": 12,
                      "year": 1981
                    },
                    "featureObservationText": "10 years",
                    "featureObservationType": {
                      "id": "2",
                      "type": "featureObservationType"
                    },
                    "methodText": "Known age"
                  }
                ],
                "id": "string",
                "identifiers": [
                  {
                    "identifier": {
                      "identifierType": "catalogNumber",
                      "nameSpace": "",
                      "value": "123456"
                    },
                    "publishRecord": true,
                    "remarks": "Some remarks"
                  }
                ],
                "distinguishedUnits": [
                  {
                    "alternateIdentifiersText": "Skin complete, prepared",
                    "identifiers": [
                      {
                        "publishRecord": true,
                        "remarks": "Some remarks"
                      }
                    ],
                    "collectingCircumstance": {
                      "id": "string",
                      "collectorsText": "Bergström, U",
                      "event": {
                        "startDate": {
                          "isoDate": "string",
                          "dateText": "Before 1800",
                          "day": 25,
                          "month": 12,
                          "year": 1981
                        },
                        "endDate": {
                          "isoDate": "string",
                          "dateText": "Before 1800",
                          "day": 25,
                          "month": 12,
                          "year": 1981
                        },
                        "expeditionText": "Vega Expedition",
                        "localityInformation": {
                          "position": {
                            "latitude": "string",
                            "longitude": "string",
                            "geodeticDatum": "string",
                            "uncertaintyInMeters": 0
                          },
                          "polygon": {
                            "vertices": [
                              null
                            ]
                          },
                          "verticalPosition": {
                            "maximumDepthInMeters": 0,
                            "maximumElevationInMeters": 0,
                            "minimumDepthInMeters": 0,
                            "minimumElevationInMeters": 0
                          },
                          "coordinatesVerbatim": "string",
                          "georeferenceSourcesText": "string",
                          "localityText": "string",
                          "remarks": "string",
                          "localityVerbatim": "string"
                        }
                      }
                    },
                    "id": "string",
                    "physicalUnitText": "Skin complete, prepared",
                    "physicalUnit": {
                      "id": "2234",
                      "type": "physicalUnit"
                    }
                  }
                ],
                "version": 0
              },
              "version": 0
            }
          }
        },
        "description": ""
      },
      "updateSpecimenRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "specimen",
                "enum": [
                  "specimen"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "relationships": {
                "properties": {
                  "featureObservationTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureObservationType"
                              ],
                              "example": "featureObservationType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalUnits": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalUnit"
                              ],
                              "example": "physicalUnit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "description": ""
      },
      "updateSpecimenPhysicalUnitsRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "physicalUnit",
                  "enum": [
                    "physicalUnit"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            }
          }
        },
        "description": ""
      },
      "updateSpecimenFeatureObservationTypesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "featureObservationType",
                  "enum": [
                    "featureObservationType"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            }
          }
        },
        "description": ""
      },
      "createPhysicalUnitRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "physicalUnit",
                "enum": [
                  "physicalUnit"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/physicalUnit"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "physicalUnit",
              "attributes": {
                "normalStorageLocationText": "string",
                "storedUnderTaxonName": "Sorex minutus"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "physicalUnit",
            "attributes": {
              "normalStorageLocationText": "string",
              "storedUnderTaxonName": "Sorex minutus"
            }
          }
        },
        "description": ""
      },
      "updatePhysicalUnitRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "physicalUnit",
                "enum": [
                  "physicalUnit"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/physicalUnit"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "description": ""
      },
      "updatePhysicalUnitStorageLocationRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "storageLocation",
                "enum": [
                  "storageLocation"
                ],
                "type": "string"
              }
            }
          }
        },
        "description": ""
      },
      "createStorageLocationRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "storageLocation",
                "enum": [
                  "storageLocation"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "relationships": {
                "properties": {
                  "physicalUnits": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalUnit"
                              ],
                              "example": "physicalUnit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "storageLocation",
              "attributes": {
                "locationText": "string"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "storageLocation",
            "attributes": {
              "locationText": "string"
            }
          }
        },
        "description": ""
      },
      "updateStorageLocationRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "storageLocation",
                "enum": [
                  "storageLocation"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "relationships": {
                "properties": {
                  "physicalUnits": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalUnit"
                              ],
                              "example": "physicalUnit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "description": ""
      },
      "createAgentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/agent"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "agent",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent//v01/agents",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getAgentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/agent"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "agent",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent//v01/agents/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {
          "primary": {
            "data": {
              "type": "agent",
              "attributes": {
                "name": "Ingimar"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "agent",
            "attributes": {
              "name": "Ingimar"
            }
          }
        },
        "description": ""
      },
      "updateAgentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/agent"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "agent",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent//v01/agents/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getAgentsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/agent"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "agent",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent//v01/agents",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getUserResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "family_name": {
            "type": "string",
            "example": "Doe"
          },
          "given_name": {
            "type": "string",
            "example": "John"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "preferred_username": {
            "type": "string",
            "example": "john doe"
          },
          "sub": {
            "type": "string",
            "example": "xxxx"
          }
        },
        "required": [
          "email",
          "preferred_username"
        ],
        "description": ""
      },
      "loginUserResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "access_token": {
            "type": "string",
            "example": "xxxx"
          },
          "expires_in": {
            "type": "integer",
            "example": 300
          },
          "not-before-policy": {
            "type": "integer",
            "example": 0
          },
          "refresh_expires_in": {
            "type": "integer",
            "example": 1800
          },
          "refresh_token": {
            "type": "string",
            "example": "xxxx"
          },
          "session_state": {
            "type": "string",
            "example": "bearer"
          },
          "token_type": {
            "type": "string",
            "example": "xxxx"
          }
        },
        "required": [
          "access_token"
        ],
        "description": ""
      },
      "createExpeditionResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/expedition"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "expedition",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedEvent/v01/expeditions",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getExpeditionResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/expedition"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "expedition",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedEvent/v01/expeditions/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateExpeditionResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/expedition"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "expedition",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedEvent/v01/expeditions/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getExpeditionsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/expedition"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "expedition",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedEvent/v01/expeditions",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createDistinguishedUnitObservationTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/distinguishedUnitObservationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "distinguishedUnitObservationType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/curatedListApi/v01/distinguishedUnitObservationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateDistinguishedUnitObservationTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/distinguishedUnitObservationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "distinguishedUnitObservationType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/curatedListApi/v01/distinguishedUnitObservationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getDistinguishedUnitObservationTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/distinguishedUnitObservationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "distinguishedUnitObservationType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/curatedListApi/v01/distinguishedUnitObservationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getDistinguishedUnitObservationTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/distinguishedUnitObservationType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "distinguishedUnitObservationType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/curatedListApi/v01/distinguishedUnitObservationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createFeatureObservationTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/featureObservationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "featureObservationType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureObservationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateFeatureObservationTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/featureObservationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "featureObservationType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureObservationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getFeatureObservationTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/featureObservationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "featureObservationType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureObservationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getFeatureObservationTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/featureObservationType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "featureObservationType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureObservationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createCatalogNumberResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/catalogNumber"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "catalogNumber",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifier/v01/catalogNumbers",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateCatalogNumberResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/catalogNumber"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "catalogNumber",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifier/v01/catalogNumbers/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getCatalogNumberResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/catalogNumber"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "catalogNumber",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifier/v01/catalogNumbers/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getCatalogNumbersResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/catalogNumber"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "catalogNumber",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifier/v01/catalogNumbers",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createCuratedLocalityResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/curatedLocality"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "curatedLocality"
                              ],
                              "example": "curatedLocality",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "descendants": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "curatedLocality"
                              ],
                              "example": "curatedLocality",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "curatedLocality"
                                ],
                                "example": "curatedLocality",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "curatedLocality",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/curatedLocalities",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateCuratedLocalityResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/curatedLocality"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "curatedLocality"
                              ],
                              "example": "curatedLocality",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "descendants": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "curatedLocality"
                              ],
                              "example": "curatedLocality",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "curatedLocality"
                                ],
                                "example": "curatedLocality",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "curatedLocality",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/curatedLocalities/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getCuratedLocalityResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/curatedLocality"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "curatedLocality"
                              ],
                              "example": "curatedLocality",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "descendants": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "curatedLocality"
                              ],
                              "example": "curatedLocality",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "curatedLocality"
                                ],
                                "example": "curatedLocality",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "curatedLocality",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/curatedLocalities/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getCuratedLocalitiesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/curatedLocality"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "curatedLocality"
                                ],
                                "example": "curatedLocality",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "descendants": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "curatedLocality"
                                ],
                                "example": "curatedLocality",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "parent": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "curatedLocality"
                                  ],
                                  "example": "curatedLocality",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "curatedLocality",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/curatedLocalities",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createSpecimenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "featureObservationTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureObservationType"
                              ],
                              "example": "featureObservationType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalUnits": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalUnit"
                              ],
                              "example": "physicalUnit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateSpecimenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "featureObservationTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureObservationType"
                              ],
                              "example": "featureObservationType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalUnits": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalUnit"
                              ],
                              "example": "physicalUnit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateSpecimenPhysicalUnitsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/physicalUnits",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenPhysicalUnitsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalUnit"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "physicalUnit",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/physicalUnits",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateSpecimenFeatureObservationTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/featureObservationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenFeatureObservationTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/featureObservationType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "featureObservationType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/featureObservationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "featureObservationTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureObservationType"
                              ],
                              "example": "featureObservationType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalUnits": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalUnit"
                              ],
                              "example": "physicalUnit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimensResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "featureObservationTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "featureObservationType"
                                ],
                                "example": "featureObservationType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "physicalUnits": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalUnit"
                                ],
                                "example": "physicalUnit",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenVersionResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "featureObservationTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureObservationType"
                              ],
                              "example": "featureObservationType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalUnits": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalUnit"
                              ],
                              "example": "physicalUnit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/versions/{versionId}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenVersionsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "featureObservationTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "featureObservationType"
                                ],
                                "example": "featureObservationType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "physicalUnits": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalUnit"
                                ],
                                "example": "physicalUnit",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/versions",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getStatusResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "up": {
                "type": "boolean"
              }
            }
          },
          "meta": {
            "type": "object"
          }
        },
        "description": ""
      },
      "createPhysicalUnitResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalUnit"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalUnit",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalUnits",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updatePhysicalUnitResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalUnit"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalUnit",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalUnits/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updatePhysicalUnitStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalUnit"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "physicalUnit",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalUnits/{id}/relationships/storageLocation",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPhysicalUnitStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalUnits/{id}/relationships/storageLocation",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPhysicalUnitResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalUnit"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalUnit",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalUnits/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPhysicalUnitsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalUnit"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "storageLocation": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "physicalUnit",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalUnits",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPhysicalUnitVersionResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalUnit"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalUnit",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalUnits/{id}/versions/{versionId}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPhysicalUnitVersionsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalUnit"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "storageLocation": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "physicalUnit",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalUnits/{id}/versions",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "physicalUnits": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalUnit"
                              ],
                              "example": "physicalUnit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "physicalUnits": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalUnit"
                              ],
                              "example": "physicalUnit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getStorageLocationPhysicalUnitsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalUnit"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "physicalUnit",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/physicalUnits",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "physicalUnits": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalUnit"
                              ],
                              "example": "physicalUnit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getStorageLocationsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/storageLocation"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "physicalUnits": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalUnit"
                                ],
                                "example": "physicalUnit",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "storageLocation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getTaxonByIdResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "taxon",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/taxon/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getTaxaByNameResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/taxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}