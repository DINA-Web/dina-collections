{
  "openapi": "3.0.0",
  "info": {
    "title": "Dina api",
    "contact": {
      "email": "oberg.anton@gmail.com"
    },
    "license": {
      "name": "GNU Affero General Public License",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "version": "0.1.0",
    "description": "This is a first draft of dina api documentation.\nDescriptions like below can be written in markdown:\n\n* [Dina web](https://alpha-cm.dina-web.net/login)\n* [Dina web with mocks](https://alpha-cm-mock.dina-web.net/login)\n* [Dina style guilde](https://alpha-style.dina-web.net)\n",
    "x-versionInfo": "# This is some version specific information\n"
  },
  "servers": [
    {
      "description": "Alpha api server",
      "url": "https://alpha-api.dina-web.net"
    },
    {
      "description": "Auth server",
      "url": "https://alpha-keycloak.dina-web.net"
    },
    {
      "description": "Local api server",
      "url": "http://127.0.0.1:4444"
    },
    {
      "description": "Slim taxonomy",
      "url": "https://alpha-slimtaxonomy.dina-web.net"
    }
  ],
  "tags": [
    {
      "description": "## Api managing agents.\n",
      "name": "agentService"
    },
    {
      "description": "Auth api\n",
      "name": "authService"
    },
    {
      "description": "CuratedEventApi - ex expeditions\n\n",
      "name": "curatedEventService"
    },
    {
      "description": "Api managing curated lists.\n",
      "name": "curatedListService"
    },
    {
      "description": "Api managing externalEvents like loan and acquisitions.\n",
      "name": "externalEventService"
    },
    {
      "description": "Locality Service\n",
      "name": "localityService"
    },
    {
      "description": "Specimens api\n",
      "name": "specimenService"
    },
    {
      "name": "statusService"
    },
    {
      "description": "Service managing storage\n",
      "name": "storageService"
    },
    {
      "description": "Mock taxon api\n",
      "name": "taxonService"
    }
  ],
  "paths": {
    "/api/agent/v01/agents": {
      "post": {
        "operationId": "createAgent",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createAgentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createAgentResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createAgent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createAgent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create agent",
        "tags": [
          "agentService"
        ]
      },
      "get": {
        "operationId": "getAgents",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getAgentsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getAgents-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getAgents-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find agents",
        "tags": [
          "agentService"
        ]
      }
    },
    "/api/agent/v01/agents/{id}": {
      "get": {
        "operationId": "getAgent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "agent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "enum": [
                "primary"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getAgentResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getAgent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getAgent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getAgent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find agent by id",
        "tags": [
          "agentService"
        ]
      },
      "patch": {
        "operationId": "updateAgent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "agent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateAgentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateAgentResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateAgent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateAgent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateAgent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates agent",
        "tags": [
          "agentService"
        ]
      }
    },
    "/auth/realms/dina/protocol/openid-connect/userInfo": {
      "get": {
        "operationId": "getUser",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getUserResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Gets user object",
        "tags": [
          "authService"
        ]
      }
    },
    "/auth/realms/dina/protocol/openid-connect/token": {
      "post": {
        "operationId": "loginUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/loginUserRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/loginUserResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "summary": "Gets user token",
        "tags": [
          "authService"
        ]
      }
    },
    "/api/curatedEvent/v01/expeditions": {
      "post": {
        "operationId": "createExpedition",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createExpeditionRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createExpeditionResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createExpedition-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createExpedition-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create expedition",
        "tags": [
          "curatedEventService"
        ]
      },
      "get": {
        "operationId": "getExpeditions",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpeditionsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpeditions-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpeditions-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find expeditions",
        "tags": [
          "curatedEventService"
        ]
      }
    },
    "/api/curatedEvent/v01/expeditions/{id}": {
      "get": {
        "operationId": "getExpedition",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "expedition id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpeditionResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpedition-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpedition-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpedition-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find expedition by id",
        "tags": [
          "curatedEventService"
        ]
      },
      "patch": {
        "operationId": "updateExpedition",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "expedition id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateExpeditionRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateExpeditionResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateExpedition-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateExpedition-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateExpedition-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates expedition",
        "tags": [
          "curatedEventService"
        ]
      }
    },
    "/api/curatedList/v01/preparationTypes": {
      "post": {
        "operationId": "createPreparationType",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createPreparationTypeRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createPreparationTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createPreparationType-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createPreparationType-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create preparationType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "getPreparationTypes",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPreparationTypesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPreparationTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPreparationTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find preparationTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/preparationTypes/{id}": {
      "patch": {
        "operationId": "updatePreparationType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "preparationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updatePreparationTypeRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePreparationTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePreparationType-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePreparationType-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePreparationType-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates preparationType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "getPreparationType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "preparationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPreparationTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPreparationType-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPreparationType-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPreparationType-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find preparationType by id",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/featureTypes": {
      "post": {
        "operationId": "createFeatureType",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createFeatureTypeRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createFeatureTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createFeatureType-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createFeatureType-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create featureType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "getFeatureTypes",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getFeatureTypesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getFeatureTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getFeatureTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find featureTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/featureTypes/{id}": {
      "patch": {
        "operationId": "updateFeatureType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "featureType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateFeatureTypeRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateFeatureTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateFeatureType-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateFeatureType-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateFeatureType-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates featureType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "getFeatureType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "featureType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getFeatureTypeResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getFeatureType-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getFeatureType-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getFeatureType-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find featureType by id",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/locality/v01/places": {
      "post": {
        "operationId": "createPlace",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createPlaceRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createPlaceResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createPlace-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createPlace-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create place",
        "tags": [
          "localityService"
        ]
      },
      "get": {
        "operationId": "getPlaces",
        "parameters": [
          {
            "in": "query",
            "name": "filter[group]",
            "description": "Filter by group, example: country",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[parentId]",
            "description": "Filter by parentId, example 123",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[search]",
            "description": "Filter by string search, example swe",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "children",
              "parent"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "children",
                  "parent"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPlacesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPlaces-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPlaces-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find places",
        "tags": [
          "localityService"
        ]
      }
    },
    "/api/locality/v01/places/{id}": {
      "patch": {
        "operationId": "updatePlace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updatePlaceRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePlaceResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePlace-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePlace-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePlace-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates place",
        "tags": [
          "localityService"
        ]
      },
      "get": {
        "operationId": "getPlace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[descendantLevels]",
            "description": "NOT IMPLEMENTED - Levels of descendants to include. Only relevant if relationships descendants provided. example: [country, city]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includes",
            "description": "NOT IMPLEMENTED - Add includes. example [descendants, children]",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "descendants",
                  "children"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "children",
              "parent"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "children",
                  "parent"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPlaceResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPlace-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPlace-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPlace-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find place by id",
        "tags": [
          "localityService"
        ]
      }
    },
    "/api/locality/v01/places/{id}/relationships/parent": {
      "patch": {
        "operationId": "updatePlaceParent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updatePlaceParentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePlaceParentResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePlaceParent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePlaceParent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePlaceParent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update place -> parent",
        "tags": [
          "localityService"
        ]
      }
    },
    "/api/specimen/v01/specimens": {
      "post": {
        "operationId": "createSpecimen",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createSpecimenRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createSpecimenResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createSpecimen-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createSpecimen-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create specimen",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "getSpecimens",
        "parameters": [
          {
            "in": "query",
            "name": "filter[catalogNumber]",
            "description": "catalog number used to filter specimens",
            "example": "123456",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "featureTypes",
              "physicalObjects",
              "places",
              "taxa"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "featureTypes",
                  "physicalObjects",
                  "places",
                  "taxa"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimensResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimens-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimens-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimens",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}": {
      "patch": {
        "operationId": "updateSpecimen",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateSpecimenRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimen-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimen-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimen-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates specimen",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "getSpecimen",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "featureTypes",
              "physicalObjects",
              "places",
              "taxa"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "featureTypes",
                  "physicalObjects",
                  "places",
                  "taxa"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimen-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimen-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimen-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen by id",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/physicalObjects": {
      "patch": {
        "operationId": "updateSpecimenPhysicalObjects",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateSpecimenPhysicalObjectsRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenPhysicalObjectsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenPhysicalObjects-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> physicalObjects",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "getSpecimenPhysicalObjects",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenPhysicalObjectsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenPhysicalObjects-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> physicalObjects",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/featureTypes": {
      "patch": {
        "operationId": "updateSpecimenFeatureTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateSpecimenFeatureTypesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenFeatureTypesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenFeatureTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenFeatureTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenFeatureTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> featureTypes",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "getSpecimenFeatureTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenFeatureTypesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenFeatureTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenFeatureTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenFeatureTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> featureTypes",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/places": {
      "patch": {
        "operationId": "updateSpecimenPlaces",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateSpecimenPlacesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenPlacesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenPlaces-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenPlaces-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSpecimenPlaces-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> places",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "getSpecimenPlaces",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenPlacesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenPlaces-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenPlaces-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenPlaces-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> places",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/taxa": {
      "get": {
        "operationId": "getSpecimenTaxa",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenTaxaResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenTaxa-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenTaxa-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenTaxa-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> taxa",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/versions/{versionId}": {
      "get": {
        "description": "The id of the returned resource is the versionId and not the ordinary id",
        "operationId": "getSpecimenVersion",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "versionId",
            "description": "specimen versionId",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenVersionResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenVersion-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenVersion-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenVersion-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen version by id and versionId",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/versions": {
      "get": {
        "operationId": "getSpecimenVersions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenVersionsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenVersions-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSpecimenVersions-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimens versions",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/status": {
      "get": {
        "operationId": "getStatus",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStatusResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "statusService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects": {
      "post": {
        "operationId": "createPhysicalObject",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createPhysicalObjectRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createPhysicalObjectResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createPhysicalObject-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createPhysicalObject-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create physicalObject",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "getPhysicalObjects",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "storageLocation"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "storageLocation"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObjects",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects/{id}": {
      "patch": {
        "operationId": "updatePhysicalObject",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updatePhysicalObjectRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePhysicalObjectResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePhysicalObject-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePhysicalObject-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePhysicalObject-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates physicalObject",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "getPhysicalObject",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "storageLocation"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "storageLocation"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObject-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObject-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObject-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObject by id",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects/{id}/relationships/storageLocation": {
      "patch": {
        "operationId": "updatePhysicalObjectStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updatePhysicalObjectStorageLocationRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePhysicalObjectStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePhysicalObjectStorageLocation-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePhysicalObjectStorageLocation-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updatePhysicalObjectStorageLocation-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update physicalObject -> storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "getPhysicalObjectStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectStorageLocation-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectStorageLocation-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectStorageLocation-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObject -> storageLocation",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects/{id}/versions/{versionId}": {
      "get": {
        "description": "The id of the returned resource is the versionId and not the ordinary id",
        "operationId": "getPhysicalObjectVersion",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "versionId",
            "description": "physicalObject versionId",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectVersionResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectVersion-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectVersion-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectVersion-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObject version by id and versionId",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects/{id}/versions": {
      "get": {
        "operationId": "getPhysicalObjectVersions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectVersionsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectVersions-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getPhysicalObjectVersions-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObjects versions",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations": {
      "post": {
        "operationId": "createStorageLocation",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createStorageLocationRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createStorageLocation-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createStorageLocation-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "getStorageLocations",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "physicalObjects"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "physicalObjects"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocationsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocations-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocations-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocations",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/{id}": {
      "patch": {
        "operationId": "updateStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateStorageLocationRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateStorageLocation-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateStorageLocation-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateStorageLocation-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "getStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "physicalObjects"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "physicalObjects"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocation-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocation-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocation-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocation by id",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/{id}/relationships/physicalObjects": {
      "get": {
        "operationId": "getStorageLocationPhysicalObjects",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocationPhysicalObjectsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocationPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocationPhysicalObjects-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStorageLocationPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocation -> physicalObjects",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/taxonomy/v01/taxon": {
      "post": {
        "operationId": "createTaxon",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/createTaxonRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createTaxonResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/createTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create taxon",
        "tags": [
          "taxonService"
        ]
      },
      "get": {
        "operationId": "getTaxaByName",
        "parameters": [
          {
            "in": "query",
            "name": "filter[name]",
            "description": "Taxon name - accepted scientific, synonym or vernacular name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "children",
              "parent"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "children",
                  "parent"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getTaxaByNameResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getTaxaByName-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getTaxaByName-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon",
        "tags": [
          "taxonService"
        ]
      }
    },
    "/api/taxonomy/v01/taxon/{id}": {
      "patch": {
        "operationId": "updateTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateTaxonRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateTaxonResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates taxon",
        "tags": [
          "taxonService"
        ]
      },
      "get": {
        "operationId": "getTaxonById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "children",
              "parent"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "children",
                  "parent"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getTaxonByIdResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getTaxonById-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getTaxonById-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getTaxonById-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon by id",
        "tags": [
          "taxonService"
        ]
      }
    },
    "/api/taxonomy/v01/taxon/{id}/relationships/parent": {
      "patch": {
        "operationId": "updateTaxonParent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/updateTaxonParentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateTaxonParentResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateTaxonParent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateTaxonParent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateTaxonParent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxon -> parent",
        "tags": [
          "taxonService"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "400": {
        "description": "Bad Request",
        "example": "400",
        "title": "400",
        "type": "integer"
      },
      "404": {
        "description": "Not Found",
        "example": "404",
        "title": "404",
        "type": "integer"
      },
      "500": {
        "description": "Internal Server Error",
        "example": "500",
        "title": "500",
        "type": "integer"
      },
      "agent": {
        "additionalProperties": false,
        "description": "WIP",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "x-category": "agentApi",
        "x-modelType": "model"
      },
      "dateWrapper": {
        "additionalProperties": false,
        "properties": {
          "isoDate": {
            "type": "string",
            "description": "A date in standard format. TBA"
          },
          "dateText": {
            "type": "string",
            "example": "Before 1800"
          },
          "day": {
            "type": "integer",
            "example": 25
          },
          "month": {
            "type": "integer",
            "example": 12
          },
          "year": {
            "type": "integer",
            "example": 1981
          }
        },
        "description": "### Definition\n\nInformation pertaining to a specific date or a date range.\n\n### Note(s)\n\nIncludes for example verbatim information about when something happened.\n",
        "x-category": "core",
        "x-modelType": "model"
      },
      "externalModelReference": {
        "additionalProperties": false,
        "description": "A reference to a model owned by another service",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "x-category": "core",
        "x-modelType": "model"
      },
      "lid": {
        "additionalProperties": false,
        "description": "A local identifier lid (local id). Should be a uuid",
        "type": "string",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model"
      },
      "notDefinedModel": {
        "additionalProperties": true,
        "description": "A model to be used until proper concept is defined",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model"
      },
      "polygon": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "vertices": {
            "type": "array",
            "description": "Corners of the polygon in sane format"
          }
        },
        "x-category": "core",
        "x-modelType": "model"
      },
      "position": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude or northing. Use negative number or letter S for coordinates on southern hemisphere."
          },
          "longitude": {
            "type": "string",
            "description": "Latitude or easting. Use negative number or letter W for coordinates on western hemisphere."
          },
          "geodeticDatum": {
            "type": "string",
            "description": "Geodetic datum wip"
          },
          "uncertaintyInMeters": {
            "type": "integer",
            "description": "Coordinate uncertainty in meters"
          },
          "referenceSystem": {
            "type": "string",
            "description": "TBA"
          }
        },
        "x-category": "core",
        "x-modelType": "model"
      },
      "readOnly": {
        "additionalProperties": true,
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "description": ""
      },
      "translatedString": {
        "additionalProperties": false,
        "properties": {
          "en": {
            "type": "string"
          },
          "sv": {
            "type": "string"
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "description": ""
      },
      "verticalPosition": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "maximumDepthInMeters": {
            "type": "integer",
            "description": "Max depth (m)"
          },
          "maximumElevationInMeters": {
            "type": "integer",
            "description": "Max elevation (m)"
          },
          "minimumDepthInMeters": {
            "type": "integer",
            "description": "Min depth (m)"
          },
          "minimumElevationInMeters": {
            "type": "integer",
            "description": "Min elevation (m)"
          }
        },
        "x-required": [
          "name",
          "id",
          "description",
          "type"
        ],
        "x-category": "core",
        "x-modelType": "model"
      },
      "curatedEvent": {
        "additionalProperties": false,
        "description": "### Definition\n\nA defined event with known extension in time and space.\n\n\n\n",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "x-category": "curatedEventApi",
        "x-modelType": "model"
      },
      "expedition": {
        "additionalProperties": false,
        "description": "tba",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "x-category": "curatedEventApi",
        "x-modelType": "model"
      },
      "curatedList": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "featureType",
              "preparationType"
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/curatedListType"
            }
          }
        },
        "x-category": "curatedListApi",
        "x-modelType": "model",
        "description": ""
      },
      "curatedListType": {
        "additionalProperties": false,
        "properties": {
          "item": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/featureType"
              },
              {
                "$ref": "#/components/schemas/preparationType"
              }
            ]
          }
        },
        "x-category": "curatedListApi",
        "x-modelType": "model",
        "description": ""
      },
      "featureType": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/translatedString"
          },
          "group": {
            "type": "string"
          },
          "selectableValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/selectableValue"
            }
          },
          "selectableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/selectableUnit"
            }
          },
          "selectableMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/selectableMethod"
            }
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "description": "### Definition\n\nThe type of FeatureObservation. Will likely be a currated list\n\n### Example(s)\n\nSex\n",
        "x-category": "curatedListApi",
        "x-modelType": "model"
      },
      "preparationType": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "example": "skin"
          },
          "name": {
            "type": "string",
            "example": "hair, scales"
          }
        },
        "x-category": "curatedListApi",
        "x-modelType": "model",
        "description": ""
      },
      "selectableMethod": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/translatedString"
          },
          "description": {
            "type": "string"
          },
          "methodType": {
            "type": "string"
          }
        },
        "x-category": "curatedListApi",
        "x-modelType": "model",
        "description": ""
      },
      "selectableUnit": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/translatedString"
          },
          "description": {
            "type": "string"
          },
          "unitType": {
            "type": "string"
          }
        },
        "x-category": "curatedListApi",
        "x-modelType": "model",
        "description": ""
      },
      "selectableValue": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/translatedString"
          },
          "description": {
            "type": "string"
          },
          "valueType": {
            "type": "string"
          }
        },
        "x-category": "curatedListApi",
        "x-modelType": "model",
        "description": ""
      },
      "identifier": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "string"
          },
          "publishRecord": {
            "type": "boolean"
          },
          "remarks": {
            "type": "string",
            "example": "Some remarks"
          },
          "identifierType": {
            "type": "string",
            "example": "catalogNumber"
          },
          "value": {
            "type": "string",
            "example": "584028"
          },
          "nameSpace": {
            "type": "string",
            "example": "mammal"
          },
          "validation": {
            "type": "string",
            "example": "^$|^[0-9]{6}$|^[0-9]{8}$"
          }
        },
        "description": "### Definition\n\nTba\n",
        "x-category": "identifierApi",
        "x-modelType": "model"
      },
      "place": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the locality"
          },
          "versionId": {
            "type": "string",
            "description": "Id of the specific version"
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp corresponding to when created"
          },
          "createdBy": {
            "type": "string",
            "description": "Some kind of reference to the individual that created the locality"
          },
          "updatedBy": {
            "type": "string",
            "description": "Some kind of reference to the individual that updated/created the specific version"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp corresponding to when updated. Could be called versionCreatedAt"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier that is consistent over time"
          },
          "description": {
            "type": "string",
            "description": "Description of the locality"
          },
          "group": {
            "type": "string",
            "description": "Group of locality",
            "enum": [
              "continent",
              "country",
              "district",
              "geodeticDatum",
              "locality",
              "province",
              "root",
              "rubin"
            ]
          },
          "centralPosition": {
            "type": "object",
            "description": "A position describing the center",
            "$ref": "#/components/schemas/position"
          },
          "parent": {
            "type": "object",
            "description": "A polygon describing the edges",
            "$ref": "#/components/schemas/place"
          },
          "polygon": {
            "type": "object",
            "description": "A polygon describing the edges",
            "$ref": "#/components/schemas/polygon"
          },
          "verticalPosition": {
            "description": "A vertical position",
            "type": "object",
            "$ref": "#/components/schemas/verticalPosition"
          },
          "type": {
            "type": "string"
          }
        },
        "x-required": [
          "name",
          "id",
          "description",
          "group"
        ],
        "description": "### Definition\n\nA defined location with known extension in space.\n",
        "x-category": "localityApi",
        "x-modelType": "model"
      },
      "collectingInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector"
          },
          "event": {
            "$ref": "#/components/schemas/event"
          }
        },
        "description": "### Definition\n\nThe context under which some specific material was collected.\n\n### Note(s)\n\nThis includes collecting information of various kinds, for example collector(s) and collecting method.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "collectionItem": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "string"
          },
          "alternateIdentifiersText": {
            "type": "string",
            "example": "Skin complete, prepared"
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identifier"
            }
          },
          "collectingInformation": {
            "$ref": "#/components/schemas/collectingInformation"
          },
          "curatorialAssessments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/curatorialAssessment"
            }
          },
          "description": {
            "type": "string"
          },
          "preparationType": {
            "$ref": "#/components/schemas/preparationType"
          },
          "id": {
            "type": "string"
          },
          "physicalObjectText": {
            "type": "string",
            "example": "Skin complete, prepared"
          },
          "physicalObject": {
            "$ref": "#/components/schemas/physicalObject"
          }
        },
        "description": "### Definition\n\nThe smallest recognized ”thing” in the collection. This may be a physical object or part of a physical object.\n\n### Example(s)\n\n* A skin prepared from a squirrel.\n* One fish in a jar with five fishes.\n* All fishes in a jar with five fishes.\n* A moss and a lichen attached to the same piece of bark may be recognized as two identifiable units.\n\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "curatorialAssessment": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "string"
          },
          "agent": {
            "type": "string",
            "example": "Doe, J."
          },
          "date": {
            "type": "string"
          },
          "condition": {
            "type": "string",
            "example": "Good"
          },
          "conditionRemarks": {
            "type": "string",
            "example": "Small damage on left hind leg"
          },
          "inventoryStatusRemarks": {
            "type": "string",
            "example": "On loan"
          },
          "isInStorage": {
            "type": "boolean"
          }
        },
        "description": "### Definition\n\nAssessment whether specimen is in storage or not found.\n\n### Example(s)\n\n* 2017-01-02 Jane Doe. Not found. On loan\n* 2016-10-11 John Doe. In storage. Good condition.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "deathInformation": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector"
          },
          "event": {
            "$ref": "#/components/schemas/event"
          }
        },
        "description": "### Definition\n\nInformation about the death of an individual or group of individuals.\n\n### Note(s)\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "determination": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "string"
          },
          "remarks": {
            "type": "string",
            "example": "Some remarks"
          },
          "determinationText": {
            "type": "string",
            "example": "Sorex minutus, by Doe, J. on 1982-01-01"
          },
          "determinationVerbatim": {
            "type": "string",
            "description": "In exactly the same words as were used originally"
          },
          "determinedByAgentText": {
            "type": "string",
            "example": "Doe, J."
          },
          "date": {
            "type": "string"
          },
          "taxon": {
            "$ref": "#/components/schemas/taxon"
          },
          "isCurrentDetermination": {
            "type": "boolean",
            "example": true
          }
        },
        "description": "### Definition\n\nA statement about a specimen's taxon name and/or type status, which is not itself a type status designation.\n\n### Note(s)\n\nA type status designation is understood here as an explicit or implicit designation of a new type status for a specimen with respect to a taxon name. A type status designation is made in a publication and is strictly regulated by a nomenclatural code. A taxonomic identification on the other hand is usually written on a label attached to a specimen, but could also be found in e.g. a publication or in a notebook stored at a different location.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "event": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "expeditionText": {
            "type": "string",
            "example": "Vega Expedition"
          },
          "locationInformation": {
            "$ref": "#/components/schemas/locationInformation"
          }
        },
        "description": "### Definition\n\nAn activity or occurrence at a particular time and location.\n\n### Note(s)\n\n\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "featureObservation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "string"
          },
          "featureObservationAgent": {
            "type": "string",
            "example": "Doe, J."
          },
          "date": {
            "$ref": "#/components/schemas/dateWrapper"
          },
          "featureObservationText": {
            "type": "string",
            "example": "10 years"
          },
          "featureObservationUnit": {
            "type": "string",
            "example": "kg"
          },
          "featureType": {
            "$ref": "#/components/schemas/featureType"
          },
          "methodText": {
            "type": "string",
            "example": "Known age"
          },
          "remarks": {
            "type": "string",
            "example": "According to catalog card"
          }
        },
        "description": "### Definition\n\nThe data measured, collected, perceived or noticed for some property by an agent (e.g. a person or a machine) during a single event.\n\n### Example(s)\n\nWhen a curator measures the wingspan and the weight of a bird, this counts as two separate observations.\n\n### Note(s)\n\nThe kinds of data for the observation is determined by its FeatureType.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "individual": {
        "additionalProperties": false,
        "description": "### Definition\n\nOne or more individuals with a single set of individual characteristics.\n\n### Example(s)\n\n* A specific squirrel represented by both a skin and a tissue sample in a collection.\n* Three fishes in a jar of alcohol, coming from the same collecting event and representing the same taxon may be treated as a single group of individuals.\n\n### Note(s)\n\nIndividual is understod in a broad sense and should be applied within its context. Thus, it should be possible to talk about individuals in for example a mineralogical collection.\n\nThis should perhaps be renamed \"individualOrGroup\" or just \"individual\".\n",
        "properties": {
          "lid": {
            "type": "string"
          },
          "determinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/determination"
            }
          },
          "taxonInformation": {
            "$ref": "#/components/schemas/taxonInformation"
          },
          "collectingInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectingInformation"
            }
          },
          "featureObservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureObservation"
            }
          },
          "id": {
            "type": "string"
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identifier"
            }
          },
          "collectionItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectionItem"
            }
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly"
          },
          "version": {
            "type": "integer"
          }
        },
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "locationInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "string"
          },
          "places": {
            "description": "An array with curated localities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/place"
            }
          },
          "position": {
            "type": "object",
            "$ref": "#/components/schemas/position"
          },
          "polygon": {
            "type": "object",
            "$ref": "#/components/schemas/polygon"
          },
          "verticalPosition": {
            "type": "object",
            "$ref": "#/components/schemas/verticalPosition"
          },
          "coordinatesVerbatim": {
            "type": "string",
            "description": "Verbatim coordinates (or corresponding information, e.g. map number) from the original source"
          },
          "georeferenceSourcesText": {
            "type": "string",
            "description": "Describe how you got the georeferenced coordinates (data source(s), tools, maps ...)"
          },
          "localityName": {
            "type": "string",
            "description": "TBA"
          },
          "remarks": {
            "type": "string",
            "description": "Notes on the locality"
          },
          "localityVerbatim": {
            "type": "string",
            "description": "Verbatim locality names and description, as in the original source, typos and all."
          }
        },
        "description": "### Definition\n\nInformation pertaining to a specific location.\n\n### Note(s)\n\nIncludes for example verbatim information about a location.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "observationInformation": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector"
          },
          "event": {
            "$ref": "#/components/schemas/event"
          }
        },
        "description": "### Definition\n\nInformation about an observation of an individual or group of individuals.\n\n### Note(s)\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "originInformation": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector"
          },
          "event": {
            "$ref": "#/components/schemas/event"
          }
        },
        "description": "### Definition\n\nInformation about the origin of an individual or group of individuals.\n\n### Note(s)\n\nThis can for example involve the genetic origin or a specific event when an individual moved from an place to another.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "specimen": {
        "additionalProperties": false,
        "description": "This is a description",
        "properties": {
          "individual": {
            "$ref": "#/components/schemas/individual"
          },
          "collectionItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectionItem"
            }
          },
          "id": {
            "type": "string"
          },
          "collectingInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectingInformation"
            }
          },
          "collectingInformations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectingInformation"
            }
          },
          "determinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/determination"
            }
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identifier"
            }
          },
          "taxonInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/taxonInformation"
            }
          },
          "featureObservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureObservation"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          },
          "version": {
            "type": "integer"
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly"
          }
        },
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "taxonInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "string"
          },
          "curatorialName": {
            "type": "string"
          },
          "taxonRemarks": {
            "type": "string"
          }
        },
        "description": "### Definition\n\nThe taxon to which an individual is currently assigned according to a local classification.\n",
        "x-category": "specimenApi",
        "x-modelType": "model"
      },
      "physicalObject": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "collectionItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectionItem"
            }
          },
          "normalStorageLocationText": {
            "description": "Will be moved to storageLocation",
            "type": "string"
          },
          "storedUnderTaxonName": {
            "description": "Will be moved to storageLocation",
            "type": "string",
            "example": "Sorex minutus"
          },
          "storageLocation": {
            "$ref": "#/components/schemas/storageLocation"
          },
          "type": {
            "type": "string"
          }
        },
        "description": "### Definition\n\nThe smallest recognized physical “thing” in the collection. A set of identifiable units. One or more.\n\n### Example(s)\n\nEx.1. A herbarium sheet with multiple leafs (many identifiable units)\nEx.2. A device where a skin is mounted at (one identifiable unit)\nEx.3. A device where a stone with a moss is mounted (two identifiable unit)\n",
        "x-category": "storageApi",
        "x-modelType": "model"
      },
      "storageLocation": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "higherLevels": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "locationText": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "description": "### Definition\n\nA delimited space in the collection where one ore more physical units can be placed.\n",
        "x-category": "storageApi",
        "x-modelType": "model"
      },
      "taxon": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "rubinNumber": {
            "type": "string",
            "description": "Rubin storage number for the taxon"
          },
          "higherTaxa": {
            "type": "object",
            "properties": {
              "order": {
                "type": "string",
                "description": "Parent order"
              },
              "suborder": {
                "type": "string",
                "description": "Parent suborder"
              },
              "infraorder": {
                "type": "string",
                "description": "Parent infraorder"
              },
              "superfamily": {
                "type": "string",
                "description": "Parent superfamily"
              },
              "family": {
                "type": "string",
                "description": "Parent family"
              },
              "subfamily": {
                "type": "string",
                "description": "Parent subfamily"
              },
              "tribe": {
                "type": "string",
                "description": "Parent tribe"
              },
              "genus": {
                "type": "string",
                "description": "Parent genus"
              },
              "subgenus": {
                "type": "string",
                "description": "Parent subgenus"
              }
            }
          },
          "rank": {
            "type": "string",
            "description": "Taxon rank"
          },
          "scientificName": {
            "type": "string",
            "description": "Taxon scientific name, binomial if species"
          },
          "author": {
            "type": "string",
            "description": "Taxon author without the year"
          },
          "authorDate": {
            "type": "string",
            "description": "Taxon author year"
          },
          "validName": {
            "type": "boolean",
            "description": "Is the name taxonomically valid",
            "default": false
          },
          "vernacularNames": {
            "type": "object",
            "properties": {
              "en": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Vernacular (common) English names for the taxon"
                }
              },
              "sv": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Vernacular (common) Swedish names for the taxon"
                }
              }
            }
          },
          "synonyms": {
            "type": "string",
            "description": "List of synonyms as free-form text"
          },
          "sortOrder": {
            "type": "string",
            "description": "Taxonomical sort order code from Mammal Species of the World list"
          }
        },
        "x-category": "taxonomyApi",
        "x-modelType": "model",
        "description": ""
      },
      "BaseError": {
        "properties": {
          "description": {
            "description": "Description of the returned code",
            "type": "string"
          },
          "detail": {
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for this particular occurrence of the problem.",
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "parameterErrors": {
            "type": "string"
          },
          "title": {
            "description": "A short, human-readable summary of the problem. Associated with the code",
            "type": "string"
          }
        },
        "required": [
          "status",
          "code"
        ],
        "title": "Base error",
        "type": "object"
      },
      "REQUEST_BODY_VALIDATION_ERROR": {
        "description": "Input body does not pass validations",
        "example": "REQUEST_BODY_VALIDATION_ERROR",
        "title": "REQUEST_BODY_VALIDATION_ERROR",
        "type": "string"
      },
      "REQUEST_ERROR": {
        "description": "Something is wrong with the request. See details",
        "example": "REQUEST_ERROR",
        "title": "REQUEST_ERROR",
        "type": "string"
      },
      "createAgent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "RESPONSE_VALIDATION_ERROR": {
        "description": "Output does not pass validations",
        "example": "RESPONSE_VALIDATION_ERROR",
        "title": "RESPONSE_VALIDATION_ERROR",
        "type": "string"
      },
      "INTERNAL_SERVER_ERROR": {
        "description": "Error occurred on server",
        "example": "INTERNAL_SERVER_ERROR",
        "title": "INTERNAL_SERVER_ERROR",
        "type": "string"
      },
      "createAgent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getAgent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "RESOURCE_NOT_FOUND_ERROR": {
        "description": "Requested resource not found. See details",
        "example": "RESOURCE_NOT_FOUND_ERROR",
        "title": "RESOURCE_NOT_FOUND_ERROR",
        "type": "string"
      },
      "getAgent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getAgent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updateAgent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updateAgent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updateAgent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getAgents-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getAgents-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "createExpedition-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "createExpedition-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getExpedition-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getExpedition-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getExpedition-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updateExpedition-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updateExpedition-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updateExpedition-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getExpeditions-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getExpeditions-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "createPreparationType-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "createPreparationType-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updatePreparationType-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updatePreparationType-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updatePreparationType-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getPreparationType-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getPreparationType-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getPreparationType-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getPreparationTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getPreparationTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "createFeatureType-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "createFeatureType-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updateFeatureType-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updateFeatureType-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updateFeatureType-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getFeatureType-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getFeatureType-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getFeatureType-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getFeatureTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getFeatureTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "createPlace-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "createPlace-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updatePlace-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updatePlace-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updatePlace-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updatePlaceParent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updatePlaceParent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updatePlaceParent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getPlace-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getPlace-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getPlace-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getPlaces-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getPlaces-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "createSpecimen-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "createSpecimen-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updateSpecimen-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updateSpecimen-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updateSpecimen-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updateSpecimenPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updateSpecimenPhysicalObjects-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updateSpecimenPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getSpecimenPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getSpecimenPhysicalObjects-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getSpecimenPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updateSpecimenFeatureTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updateSpecimenFeatureTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updateSpecimenFeatureTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getSpecimenFeatureTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getSpecimenFeatureTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getSpecimenFeatureTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updateSpecimenPlaces-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updateSpecimenPlaces-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updateSpecimenPlaces-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getSpecimenPlaces-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getSpecimenPlaces-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getSpecimenPlaces-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getSpecimenTaxa-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getSpecimenTaxa-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getSpecimenTaxa-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getSpecimen-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getSpecimen-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getSpecimen-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getSpecimens-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getSpecimens-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getSpecimenVersion-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getSpecimenVersion-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getSpecimenVersion-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getSpecimenVersions-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getSpecimenVersions-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "createPhysicalObject-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "createPhysicalObject-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updatePhysicalObject-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updatePhysicalObject-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updatePhysicalObject-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updatePhysicalObjectStorageLocation-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updatePhysicalObjectStorageLocation-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updatePhysicalObjectStorageLocation-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getPhysicalObjectStorageLocation-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getPhysicalObjectStorageLocation-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getPhysicalObjectStorageLocation-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getPhysicalObject-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getPhysicalObject-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getPhysicalObject-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getPhysicalObjectVersion-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getPhysicalObjectVersion-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getPhysicalObjectVersion-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getPhysicalObjectVersions-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getPhysicalObjectVersions-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "createStorageLocation-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "createStorageLocation-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updateStorageLocation-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updateStorageLocation-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updateStorageLocation-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getStorageLocationPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getStorageLocationPhysicalObjects-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getStorageLocationPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getStorageLocation-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getStorageLocation-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getStorageLocation-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getStorageLocations-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getStorageLocations-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "createTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "createTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updateTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updateTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updateTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "updateTaxonParent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "updateTaxonParent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "updateTaxonParent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getTaxonById-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getTaxonById-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "getTaxonById-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "getTaxaByName-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "getTaxaByName-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "createAgentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "agent",
                "enum": [
                  "agent"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/agent"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "agent",
              "attributes": {
                "name": "orvar"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "agent",
            "attributes": {
              "name": "orvar"
            }
          }
        },
        "description": ""
      },
      "updateAgentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "agent",
                "enum": [
                  "agent"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/agent"
              }
            }
          }
        },
        "description": ""
      },
      "loginUserRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "client_id": {
            "type": "string",
            "example": "dina-reset"
          },
          "grant_type": {
            "type": "string",
            "example": "password"
          },
          "password": {
            "type": "string",
            "example": "xxxxx"
          },
          "username": {
            "type": "string",
            "example": "john doe"
          }
        },
        "required": [
          "client_id",
          "grant_type",
          "password",
          "username"
        ],
        "description": ""
      },
      "createExpeditionRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "expedition",
                "enum": [
                  "expedition"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/expedition"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "expedition",
              "attributes": {}
            }
          }
        },
        "example": {
          "data": {
            "type": "expedition",
            "attributes": {}
          }
        },
        "description": ""
      },
      "updateExpeditionRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "expedition",
                "enum": [
                  "expedition"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/expedition"
              }
            }
          }
        },
        "description": ""
      },
      "createPreparationTypeRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "preparationType",
                "enum": [
                  "preparationType"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/preparationType"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "preparationType",
              "attributes": {
                "category": "skin",
                "name": "preparation name"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "preparationType",
            "attributes": {
              "category": "skin",
              "name": "preparation name"
            }
          }
        },
        "description": ""
      },
      "updatePreparationTypeRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "preparationType",
                "enum": [
                  "preparationType"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/preparationType"
              }
            }
          }
        },
        "description": ""
      },
      "createFeatureTypeRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "featureType",
                "enum": [
                  "featureType"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/featureType"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "id": "1234",
              "type": "featureType",
              "attributes": {
                "name": {
                  "en": "bone",
                  "sv": "ben"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "id": "1234",
            "type": "featureType",
            "attributes": {
              "name": {
                "en": "bone",
                "sv": "ben"
              }
            }
          }
        },
        "description": ""
      },
      "updateFeatureTypeRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "featureType",
                "enum": [
                  "featureType"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/featureType"
              }
            }
          }
        },
        "description": ""
      },
      "createPlaceRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "place",
                "enum": [
                  "place"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/place"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "place",
              "attributes": {
                "name": "string",
                "versionId": "string",
                "createdAt": "string",
                "createdBy": "string",
                "updatedBy": "string",
                "updatedAt": "string",
                "description": "string",
                "centralPosition": {
                  "latitude": "string",
                  "longitude": "string",
                  "geodeticDatum": "string",
                  "uncertaintyInMeters": 0
                },
                "verticalPosition": {
                  "maximumDepthInMeters": 0,
                  "maximumElevationInMeters": 0,
                  "minimumDepthInMeters": 0,
                  "minimumElevationInMeters": 0
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "place",
            "attributes": {
              "name": "string",
              "versionId": "string",
              "createdAt": "string",
              "createdBy": "string",
              "updatedBy": "string",
              "updatedAt": "string",
              "description": "string",
              "centralPosition": {
                "latitude": "string",
                "longitude": "string",
                "geodeticDatum": "string",
                "uncertaintyInMeters": 0
              },
              "verticalPosition": {
                "maximumDepthInMeters": 0,
                "maximumElevationInMeters": 0,
                "minimumDepthInMeters": 0,
                "minimumElevationInMeters": 0
              }
            }
          }
        },
        "description": ""
      },
      "updatePlaceRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "place",
                "enum": [
                  "place"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/place"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "description": ""
      },
      "updatePlaceParentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "place",
                "enum": [
                  "place"
                ],
                "type": "string"
              }
            }
          }
        },
        "description": ""
      },
      "createSpecimenRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "specimen",
                "enum": [
                  "specimen"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "relationships": {
                "properties": {
                  "featureTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureType"
                              ],
                              "example": "featureType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "places": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "taxa": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "specimen",
              "relationships": {
                "places": {
                  "data": [
                    {
                      "id": "1",
                      "type": "place"
                    },
                    {
                      "id": "2",
                      "type": "place"
                    },
                    {
                      "id": "3",
                      "type": "place"
                    },
                    {
                      "id": "4",
                      "type": "place"
                    },
                    {
                      "id": "5",
                      "type": "place"
                    }
                  ]
                },
                "featureTypes": {
                  "data": [
                    {
                      "id": "2",
                      "type": "featureType"
                    }
                  ]
                },
                "physicalObjects": {
                  "data": [
                    {
                      "id": "2234",
                      "type": "physicalObject"
                    }
                  ]
                }
              },
              "attributes": {
                "determinations": [
                  {
                    "determinationVerbatim": "determinationVerbatim",
                    "determinedByAgentText": "determinedByAgentText",
                    "isCurrentDetermination": true,
                    "remarks": "remarks",
                    "taxon": {
                      "id": "2367",
                      "type": "taxon"
                    },
                    "lid": "a70d054c-ec04-45bc-860b-d522f8f48328"
                  }
                ],
                "collectionItems": [
                  {
                    "alternateIdentifiersText": "alternateIdentifiersText",
                    "physicalObject": {
                      "id": "2234",
                      "type": "physicalObject"
                    },
                    "physicalObjectText": "physicalObjectText",
                    "lid": "af80e78b-c61e-485f-80a8-06d237400583"
                  }
                ],
                "events": [
                  {
                    "endDate": "endDate",
                    "expeditionText": "expeditionText",
                    "locationInformation": {
                      "coordinatesVerbatim": "coordinatesVerbatim",
                      "places": [
                        {
                          "id": "1",
                          "type": "place"
                        },
                        {
                          "id": "2",
                          "type": "place"
                        },
                        {
                          "id": "3",
                          "type": "place"
                        },
                        {
                          "id": "4",
                          "type": "place"
                        },
                        {
                          "id": "5",
                          "type": "place"
                        }
                      ],
                      "georeferenceSourcesText": "georeferenceSourcesText",
                      "localityVerbatim": "localityVerbatim",
                      "position": {
                        "geodeticDatum": "geodeticDatum text",
                        "latitude": "latitude-string",
                        "longitude": "longitude-string",
                        "uncertaintyInMeters": 10
                      },
                      "remarks": "remarks",
                      "verticalPosition": {
                        "maximumDepthInMeters": 100,
                        "maximumElevationInMeters": 100,
                        "minimumDepthInMeters": 20,
                        "minimumElevationInMeters": 20
                      }
                    },
                    "lid": "4489ba7a-00aa-4a88-b257-cfadf92e1ac5"
                  }
                ],
                "featureObservations": [
                  {
                    "featureObservationAgent": "featureObservationAgent",
                    "featureObservationText": "21",
                    "featureType": {
                      "id": "1",
                      "type": "featureType"
                    },
                    "methodText": "methodText",
                    "lid": "eed22ecc-7927-4b32-ae36-8e4e1dd465a8"
                  }
                ],
                "identifiers": [
                  {
                    "identifierType": "catalogNumber",
                    "lid": "9fc8671a-c801-4e62-b0b4-9a946be2ba09",
                    "nameSpace": "",
                    "publishRecord": true,
                    "remarks": "",
                    "value": "123456"
                  }
                ],
                "collectingInformation": [
                  {
                    "collectorsText": "collectorsText",
                    "event": "4489ba7a-00aa-4a88-b257-cfadf92e1ac5",
                    "lid": "44ab19bf-4328-42d3-9f8e-c88854847234"
                  }
                ],
                "individual": [
                  {
                    "taxonInformation": "c54e5ba9-4b51-4601-849d-5f2f05312ba4",
                    "featureObservations": [
                      "eed22ecc-7927-4b32-ae36-8e4e1dd465a8"
                    ],
                    "collectionItems": [
                      "af80e78b-c61e-485f-80a8-06d237400583"
                    ],
                    "identifiers": [
                      "9fc8671a-c801-4e62-b0b4-9a946be2ba09"
                    ],
                    "collectingInformation": [
                      "44ab19bf-4328-42d3-9f8e-c88854847234"
                    ],
                    "lid": "836625c3-a049-4323-8b52-4bc425f5be04"
                  }
                ],
                "taxonInformation": [
                  {
                    "determinations": [
                      "a70d054c-ec04-45bc-860b-d522f8f48328"
                    ],
                    "lid": "c54e5ba9-4b51-4601-849d-5f2f05312ba4"
                  }
                ]
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "specimen",
            "relationships": {
              "places": {
                "data": [
                  {
                    "id": "1",
                    "type": "place"
                  },
                  {
                    "id": "2",
                    "type": "place"
                  },
                  {
                    "id": "3",
                    "type": "place"
                  },
                  {
                    "id": "4",
                    "type": "place"
                  },
                  {
                    "id": "5",
                    "type": "place"
                  }
                ]
              },
              "featureTypes": {
                "data": [
                  {
                    "id": "2",
                    "type": "featureType"
                  }
                ]
              },
              "physicalObjects": {
                "data": [
                  {
                    "id": "2234",
                    "type": "physicalObject"
                  }
                ]
              }
            },
            "attributes": {
              "determinations": [
                {
                  "determinationVerbatim": "determinationVerbatim",
                  "determinedByAgentText": "determinedByAgentText",
                  "isCurrentDetermination": true,
                  "remarks": "remarks",
                  "taxon": {
                    "id": "2367",
                    "type": "taxon"
                  },
                  "lid": "a70d054c-ec04-45bc-860b-d522f8f48328"
                }
              ],
              "collectionItems": [
                {
                  "alternateIdentifiersText": "alternateIdentifiersText",
                  "physicalObject": {
                    "id": "2234",
                    "type": "physicalObject"
                  },
                  "physicalObjectText": "physicalObjectText",
                  "lid": "af80e78b-c61e-485f-80a8-06d237400583"
                }
              ],
              "events": [
                {
                  "endDate": "endDate",
                  "expeditionText": "expeditionText",
                  "locationInformation": {
                    "coordinatesVerbatim": "coordinatesVerbatim",
                    "places": [
                      {
                        "id": "1",
                        "type": "place"
                      },
                      {
                        "id": "2",
                        "type": "place"
                      },
                      {
                        "id": "3",
                        "type": "place"
                      },
                      {
                        "id": "4",
                        "type": "place"
                      },
                      {
                        "id": "5",
                        "type": "place"
                      }
                    ],
                    "georeferenceSourcesText": "georeferenceSourcesText",
                    "localityVerbatim": "localityVerbatim",
                    "position": {
                      "geodeticDatum": "geodeticDatum text",
                      "latitude": "latitude-string",
                      "longitude": "longitude-string",
                      "uncertaintyInMeters": 10
                    },
                    "remarks": "remarks",
                    "verticalPosition": {
                      "maximumDepthInMeters": 100,
                      "maximumElevationInMeters": 100,
                      "minimumDepthInMeters": 20,
                      "minimumElevationInMeters": 20
                    }
                  },
                  "lid": "4489ba7a-00aa-4a88-b257-cfadf92e1ac5"
                }
              ],
              "featureObservations": [
                {
                  "featureObservationAgent": "featureObservationAgent",
                  "featureObservationText": "21",
                  "featureType": {
                    "id": "1",
                    "type": "featureType"
                  },
                  "methodText": "methodText",
                  "lid": "eed22ecc-7927-4b32-ae36-8e4e1dd465a8"
                }
              ],
              "identifiers": [
                {
                  "identifierType": "catalogNumber",
                  "lid": "9fc8671a-c801-4e62-b0b4-9a946be2ba09",
                  "nameSpace": "",
                  "publishRecord": true,
                  "remarks": "",
                  "value": "123456"
                }
              ],
              "collectingInformation": [
                {
                  "collectorsText": "collectorsText",
                  "event": "4489ba7a-00aa-4a88-b257-cfadf92e1ac5",
                  "lid": "44ab19bf-4328-42d3-9f8e-c88854847234"
                }
              ],
              "individual": [
                {
                  "taxonInformation": "c54e5ba9-4b51-4601-849d-5f2f05312ba4",
                  "featureObservations": [
                    "eed22ecc-7927-4b32-ae36-8e4e1dd465a8"
                  ],
                  "collectionItems": [
                    "af80e78b-c61e-485f-80a8-06d237400583"
                  ],
                  "identifiers": [
                    "9fc8671a-c801-4e62-b0b4-9a946be2ba09"
                  ],
                  "collectingInformation": [
                    "44ab19bf-4328-42d3-9f8e-c88854847234"
                  ],
                  "lid": "836625c3-a049-4323-8b52-4bc425f5be04"
                }
              ],
              "taxonInformation": [
                {
                  "determinations": [
                    "a70d054c-ec04-45bc-860b-d522f8f48328"
                  ],
                  "lid": "c54e5ba9-4b51-4601-849d-5f2f05312ba4"
                }
              ]
            }
          }
        },
        "description": ""
      },
      "updateSpecimenRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "specimen",
                "enum": [
                  "specimen"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "relationships": {
                "properties": {
                  "featureTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureType"
                              ],
                              "example": "featureType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "places": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "taxa": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "description": ""
      },
      "updateSpecimenPhysicalObjectsRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "physicalObject",
                  "enum": [
                    "physicalObject"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            }
          }
        },
        "description": ""
      },
      "updateSpecimenFeatureTypesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "featureType",
                  "enum": [
                    "featureType"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            }
          }
        },
        "description": ""
      },
      "updateSpecimenPlacesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "place",
                  "enum": [
                    "place"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            }
          }
        },
        "description": ""
      },
      "createPhysicalObjectRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "physicalObject",
                "enum": [
                  "physicalObject"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "physicalObject",
              "attributes": {
                "normalStorageLocationText": "string",
                "storedUnderTaxonName": "Sorex minutus"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "physicalObject",
            "attributes": {
              "normalStorageLocationText": "string",
              "storedUnderTaxonName": "Sorex minutus"
            }
          }
        },
        "description": ""
      },
      "updatePhysicalObjectRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "physicalObject",
                "enum": [
                  "physicalObject"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "description": ""
      },
      "updatePhysicalObjectStorageLocationRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "storageLocation",
                "enum": [
                  "storageLocation"
                ],
                "type": "string"
              }
            }
          }
        },
        "description": ""
      },
      "createStorageLocationRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "storageLocation",
                "enum": [
                  "storageLocation"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "relationships": {
                "properties": {
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "storageLocation",
              "attributes": {
                "locationText": "string"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "storageLocation",
            "attributes": {
              "locationText": "string"
            }
          }
        },
        "description": ""
      },
      "updateStorageLocationRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "storageLocation",
                "enum": [
                  "storageLocation"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "relationships": {
                "properties": {
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "description": ""
      },
      "createTaxonRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "taxon",
                "enum": [
                  "taxon"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "taxon",
              "attributes": {
                "rubinNumber": "123456",
                "higherTaxa": {
                  "order": "Parent order",
                  "suborder": "Parent suborder",
                  "infraorder": "Parent infraorder",
                  "superfamily": "Parent superfamily",
                  "family": "Parent family",
                  "subfamily": "Parent subfamily",
                  "tribe": "Parent tribe",
                  "genus": "Parent genus",
                  "subgenus": "Parent subgenus"
                },
                "rank": "Taxon rank",
                "scientificName": "Sorex minutus",
                "author": "John Doe",
                "authorDate": "John Doe 2018",
                "validName": true,
                "vernacularNames": {
                  "en": [
                    "mouse"
                  ],
                  "sv": [
                    "mus"
                  ]
                },
                "synonyms": "synonyms"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "taxon",
            "attributes": {
              "rubinNumber": "123456",
              "higherTaxa": {
                "order": "Parent order",
                "suborder": "Parent suborder",
                "infraorder": "Parent infraorder",
                "superfamily": "Parent superfamily",
                "family": "Parent family",
                "subfamily": "Parent subfamily",
                "tribe": "Parent tribe",
                "genus": "Parent genus",
                "subgenus": "Parent subgenus"
              },
              "rank": "Taxon rank",
              "scientificName": "Sorex minutus",
              "author": "John Doe",
              "authorDate": "John Doe 2018",
              "validName": true,
              "vernacularNames": {
                "en": [
                  "mouse"
                ],
                "sv": [
                  "mus"
                ]
              },
              "synonyms": "synonyms"
            }
          }
        },
        "description": ""
      },
      "updateTaxonRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "taxon",
                "enum": [
                  "taxon"
                ],
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "description": ""
      },
      "updateTaxonParentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "taxon",
                "enum": [
                  "taxon"
                ],
                "type": "string"
              }
            }
          }
        },
        "description": ""
      },
      "createAgentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/agent"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "agent",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/agents",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getAgentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/agent"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "agent",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/agents/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {
          "primary": {
            "data": {
              "type": "agent",
              "attributes": {
                "name": "Ingimar"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "agent",
            "attributes": {
              "name": "Ingimar"
            }
          }
        },
        "description": ""
      },
      "updateAgentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/agent"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "agent",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/agents/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getAgentsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/agent"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "agent",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/agents",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getUserResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "family_name": {
            "type": "string",
            "example": "Doe"
          },
          "given_name": {
            "type": "string",
            "example": "John"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "preferred_username": {
            "type": "string",
            "example": "john doe"
          },
          "sub": {
            "type": "string",
            "example": "xxxx"
          }
        },
        "required": [
          "email",
          "preferred_username"
        ],
        "description": ""
      },
      "loginUserResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "access_token": {
            "type": "string",
            "example": "xxxx"
          },
          "expires_in": {
            "type": "integer",
            "example": 300
          },
          "not-before-policy": {
            "type": "integer",
            "example": 0
          },
          "refresh_expires_in": {
            "type": "integer",
            "example": 1800
          },
          "refresh_token": {
            "type": "string",
            "example": "xxxx"
          },
          "session_state": {
            "type": "string",
            "example": "bearer"
          },
          "token_type": {
            "type": "string",
            "example": "xxxx"
          }
        },
        "required": [
          "access_token"
        ],
        "description": ""
      },
      "createExpeditionResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/expedition"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "expedition",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedEvent/v01/expeditions",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getExpeditionResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/expedition"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "expedition",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedEvent/v01/expeditions/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateExpeditionResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/expedition"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "expedition",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedEvent/v01/expeditions/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getExpeditionsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/expedition"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "expedition",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedEvent/v01/expeditions",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createPreparationTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/preparationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "preparationType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updatePreparationTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/preparationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "preparationType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPreparationTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/preparationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "preparationType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPreparationTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/preparationType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "preparationType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createFeatureTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/featureType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "featureType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateFeatureTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/featureType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "featureType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getFeatureTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/featureType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "featureType",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getFeatureTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/featureType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "featureType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createPlaceResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/place"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "place",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updatePlaceResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/place"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "place",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updatePlaceParentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/place"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "place",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}/relationships/parent",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPlaceResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/place"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "place",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPlacesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/place"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "parent": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "place",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createSpecimenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "featureTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureType"
                              ],
                              "example": "featureType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "places": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "taxa": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateSpecimenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "featureTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureType"
                              ],
                              "example": "featureType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "places": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "taxa": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateSpecimenPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "physicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateSpecimenFeatureTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenFeatureTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/featureType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "featureType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateSpecimenPlacesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenPlacesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/place"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "place",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenTaxaResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/taxa",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "featureTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureType"
                              ],
                              "example": "featureType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "places": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "taxa": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimensResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "featureTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "featureType"
                                ],
                                "example": "featureType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "physicalObjects": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalObject"
                                ],
                                "example": "physicalObject",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "places": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "taxa": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenVersionResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "featureTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureType"
                              ],
                              "example": "featureType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "places": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "taxa": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/versions/{versionId}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getSpecimenVersionsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "featureTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "featureType"
                                ],
                                "example": "featureType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "physicalObjects": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalObject"
                                ],
                                "example": "physicalObject",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "places": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "taxa": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/versions",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getStatusResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "up": {
                "type": "boolean"
              }
            }
          },
          "meta": {
            "type": "object"
          }
        },
        "description": ""
      },
      "createPhysicalObjectResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalObject",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updatePhysicalObjectResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalObject",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updatePhysicalObjectStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "physicalObject",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}/relationships/storageLocation",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPhysicalObjectStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}/relationships/storageLocation",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPhysicalObjectResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalObject",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "storageLocation": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "physicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPhysicalObjectVersionResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalObject",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}/versions/{versionId}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getPhysicalObjectVersionsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "storageLocation": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "physicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}/versions",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getStorageLocationPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "physicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getStorageLocationsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/storageLocation"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "physicalObjects": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalObject"
                                ],
                                "example": "physicalObject",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "storageLocation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "createTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "taxon",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "taxon",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxon/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "updateTaxonParentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "taxon",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxon/{id}/relationships/parent",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getTaxonByIdResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "taxon",
                "type": "string"
              }
            },
            "type": "object"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxon/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      },
      "getTaxaByNameResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "parent": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "jsonapi": {
            "type": "object"
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        },
        "type": "object",
        "x-examples": {},
        "description": ""
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}