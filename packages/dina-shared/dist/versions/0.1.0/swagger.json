{
  "swagger": "2.0",
  "host": "alpha-api-docs.dina-web.net",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "info": {
    "title": "Dina api",
    "contact": {
      "email": "oberg.anton@gmail.com"
    },
    "license": {
      "name": "GNU Affero General Public License",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "version": "0.1.0",
    "description": "This is a first draft of dina api documentation.\nDescriptions like below can be written in markdown:\n\n* [Dina web](https://alpha-cm.dina-web.net/login)\n* [Dina web with mocks](https://alpha-cm-mock.dina-web.net/login)\n* [Dina style guilde](https://alpha-style.dina-web.net)\n",
    "x-versionInfo": "# This is some version specific information\n"
  },
  "tags": [
    {
      "description": "Description of collections api\n",
      "name": "collectionsApi"
    },
    {
      "description": "Description of auth api\n",
      "name": "authApi"
    },
    {
      "name": "localityApi"
    },
    {
      "description": "Description of slim taxonomy\n",
      "name": "slimTaxonomyApi"
    }
  ],
  "definitions": {
    "batchItem": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "description": "Should have a one of condition"
        },
        "model": {
          "type": "string"
        },
        "schemaVersion": {
          "type": "string"
        },
        "uploaded": {
          "type": "boolean"
        },
        "isValid": {
          "type": "boolean"
        }
      },
      "x-category": "batch",
      "x-modelType": "model"
    },
    "batchUpload": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/batchItem"
          }
        },
        "uploadStarted": {
          "type": "boolean"
        },
        "uploadCompleted": {
          "type": "boolean"
        },
        "userId": {
          "type": "boolean"
        },
        "nUploadedItems": {
          "type": "integer"
        },
        "nValidItems": {
          "type": "integer"
        },
        "nItems": {
          "type": "integer"
        }
      },
      "x-category": "batch",
      "x-modelType": "model"
    },
    "catalogedUnit": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "physicalUnits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/physicalUnit"
          }
        },
        "publishRecord": {
          "type": "boolean"
        },
        "remarks": {
          "type": "string",
          "example": "Some remarks"
        },
        "storedUnderTaxonName": {
          "type": "string",
          "example": "Sorex minutus"
        },
        "catalogNumber": {
          "type": "string",
          "example": "584028",
          "pattern": "^$|^[0-9]{6}$|^[0-9]{8}$",
          "description": "Catalog number is a string of 6 or 8 digits\n"
        }
      },
      "example": {
        "id": 1234,
        "storedUnderTaxonName": "mjau"
      },
      "x-category": "collection",
      "x-modelType": "model"
    },
    "featureObservation": {
      "additionalProperties": false,
      "properties": {
        "featureObservationAgent": {
          "type": "string",
          "example": "Doe, J."
        },
        "featureObservationDate": {
          "type": "string",
          "example": "2017-12-12"
        },
        "featureObservationText": {
          "type": "string",
          "example": "10 years"
        },
        "featureObservationType": {
          "$ref": "#/definitions/featureObservationType"
        },
        "id": {
          "type": "string"
        },
        "methodText": {
          "type": "string",
          "example": "Known age"
        }
      },
      "x-category": "collection",
      "x-modelType": "model"
    },
    "featureObservationType": {
      "additionalProperties": false,
      "properties": {
        "featureObservationTypeName": {
          "type": "string",
          "enum": [
            "sex",
            "length",
            "age",
            "weight",
            "conditionAtCollecting",
            "ageStage"
          ]
        },
        "id": {
          "type": "string",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
          ]
        }
      },
      "required": [
        "featureObservationTypeName"
      ],
      "x-category": "collection",
      "x-modelType": "model"
    },
    "identification": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "identificationRemarks": {
          "type": "string",
          "example": "Some remarks"
        },
        "identificationText": {
          "type": "string",
          "example": "Sorex minutus, by Doe, J. on 1982-01-01"
        },
        "identifiedAsVerbatim": {
          "type": "string",
          "description": "In exactly the same words as were used originally"
        },
        "identifiedByAgentText": {
          "type": "string",
          "example": "Doe, J."
        },
        "identifiedDateText": {
          "type": "string",
          "example": "Before 1800"
        },
        "identifiedDay": {
          "type": "integer",
          "example": 25
        },
        "identifiedMonth": {
          "type": "integer",
          "example": 12
        },
        "identifiedTaxonNameStandardized": {
          "type": "string",
          "example": "Chironectes minimus"
        },
        "identifiedYear": {
          "type": "integer",
          "example": 1981
        },
        "individualGroup": {
          "$ref": "#/definitions/individualGroup"
        },
        "isCurrentIdentification": {
          "type": "boolean",
          "example": true
        },
        "version": {
          "type": "integer"
        }
      },
      "x-category": "collection",
      "x-modelType": "model"
    },
    "individualGroup": {
      "additionalProperties": false,
      "description": "# This is a description in a markdown file\n",
      "properties": {
        "causeOfDeathStandardized": {
          "type": "string"
        },
        "causeOfDeathText": {
          "type": "string"
        },
        "featureObservations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/featureObservation"
          }
        },
        "id": {
          "type": "string"
        },
        "identifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/identification"
          }
        },
        "occurrences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/occurrence"
          }
        },
        "originStandardized": {
          "type": "string"
        },
        "physicalUnits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/physicalUnit"
          }
        },
        "version": {
          "type": "integer"
        }
      },
      "x-category": "collection",
      "x-modelType": "model"
    },
    "localityInformation": {
      "additionalProperties": false,
      "properties": {
        "curatedLocalities": {
          "description": "An array with curated localities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/curatedLocality"
          }
        },
        "position": {
          "description": "A specific position",
          "type": "object",
          "$ref": "#/definitions/position"
        },
        "polygon": {
          "description": "A specific position",
          "type": "object",
          "$ref": "#/definitions/polygon"
        },
        "verticalPosition": {
          "description": "A vertical position",
          "type": "object",
          "$ref": "#/definitions/verticalPosition"
        },
        "coordinatesVerbatim": {
          "type": "string",
          "description": "Verbatim coordinates (or corresponding information, e.g. map number) from the original source"
        },
        "georeferenceSourcesText": {
          "type": "string",
          "description": "Describe how you got the georeferenced coordinates (data source(s), tools, maps ...)"
        },
        "localityText": {
          "type": "string",
          "description": "TBA"
        },
        "localityRemarks": {
          "type": "string",
          "description": "Notes on the locality"
        },
        "localityVerbatim": {
          "type": "string",
          "description": "Verbatim locality names and description, as in the original source, typos and all."
        }
      },
      "description": "# localityInformation\n\nContains information related to where an occurrence happened. \n",
      "x-category": "collection",
      "x-modelType": "model"
    },
    "occurrence": {
      "additionalProperties": false,
      "properties": {
        "collectorsText": {
          "type": "string",
          "example": "Bergstr√∂m, U",
          "description": "Name of the collector"
        },
        "dayEnd": {
          "type": "integer",
          "example": 2
        },
        "dayStart": {
          "type": "integer",
          "example": 30
        },
        "establishmentMeansStandardized": {
          "type": "string"
        },
        "expeditionText": {
          "type": "string",
          "example": "Vega Expedition"
        },
        "id": {
          "type": "string"
        },
        "individualGroup": {
          "$ref": "#/definitions/individualGroup"
        },
        "isDeathEvent": {
          "type": "boolean"
        },
        "localityInformation": {
          "$ref": "#/definitions/localityInformation"
        },
        "monthEnd": {
          "type": "integer",
          "example": 3
        },
        "monthStart": {
          "type": "integer",
          "example": 2
        },
        "occurrenceDateText": {
          "type": "string",
          "example": "Before 1800"
        },
        "yearEnd": {
          "type": "integer",
          "example": 1991
        },
        "yearStart": {
          "type": "integer",
          "example": 1990
        }
      },
      "x-category": "collection",
      "x-modelType": "model"
    },
    "physicalUnit": {
      "additionalProperties": false,
      "properties": {
        "alternateIdentifiersText": {
          "type": "string",
          "example": "Skin complete, prepared"
        },
        "catalogedUnit": {
          "$ref": "#/definitions/catalogedUnit"
        },
        "id": {
          "type": "string"
        },
        "individualGroup": {
          "$ref": "#/definitions/individualGroup"
        },
        "normalStorageLocationText": {
          "type": "string"
        },
        "physicalUnitText": {
          "type": "string",
          "example": "Skin complete, prepared"
        }
      },
      "x-category": "collection",
      "x-modelType": "model"
    },
    "polygon": {
      "additionalProperties": false,
      "description": "A polygon with longitude, latitude vertices",
      "properties": {
        "vertices": {
          "type": "array",
          "description": "Corners of the polygon in sane format"
        }
      },
      "x-category": "core",
      "x-modelType": "model"
    },
    "position": {
      "additionalProperties": false,
      "description": "A position represent a specific position",
      "properties": {
        "latitude": {
          "type": "string",
          "description": "Latitude or northing. Use negative number or letter S for coordinates on southern hemisphere."
        },
        "longitude": {
          "type": "string",
          "description": "Latitude or easting. Use negative number or letter W for coordinates on western hemisphere."
        },
        "geodeticDatum": {
          "type": "string",
          "description": "Geodetic datum wip"
        },
        "uncertaintyInMeters": {
          "type": "integer",
          "description": "Coordinate uncertainty in meters"
        }
      },
      "x-required": [
        "name",
        "id",
        "description",
        "type"
      ],
      "x-category": "core",
      "x-modelType": "model"
    },
    "verticalPosition": {
      "additionalProperties": false,
      "description": "A description of vertical position",
      "properties": {
        "maximumDepthInMeters": {
          "type": "integer",
          "description": "Max depth (m)"
        },
        "maximumElevationInMeters": {
          "type": "integer",
          "description": "Max elevation (m)"
        },
        "minimumDepthInMeters": {
          "type": "integer",
          "description": "Min depth (m)"
        },
        "minimumElevationInMeters": {
          "type": "integer",
          "description": "Min elevation (m)"
        }
      },
      "x-required": [
        "name",
        "id",
        "description",
        "type"
      ],
      "x-category": "core",
      "x-modelType": "model"
    },
    "curatedLocality": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the locality"
        },
        "versionId": {
          "type": "string",
          "description": "Id of the specific version"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp corresponding to when created"
        },
        "createdBy": {
          "type": "string",
          "description": "Some kind of reference to the individual that created the locality"
        },
        "updatedBy": {
          "type": "string",
          "description": "Some kind of reference to the individual that updated/created the specific version"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp corresponding to when updated. Could be called versionCreatedAt"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier that is consistent over time"
        },
        "description": {
          "type": "string",
          "description": "Description of the locality"
        },
        "relations": {
          "type": "array",
          "description": "A relation to other curatedLocalities",
          "items": {
            "$ref": "#/definitions/curatedLocalityRelation"
          }
        },
        "type": {
          "type": "string",
          "description": "Type of locality",
          "enum": [
            "continent",
            "country",
            "district",
            "geodeticDatum",
            "locality",
            "province",
            "rubin"
          ]
        },
        "centralPosition": {
          "type": "object",
          "description": "A position describing the center",
          "$ref": "#/definitions/position"
        },
        "polygon": {
          "type": "object",
          "description": "A polygon describing the edges",
          "$ref": "#/definitions/polygon"
        },
        "verticalPosition": {
          "description": "A vertical position",
          "type": "object",
          "$ref": "#/definitions/verticalPosition"
        }
      },
      "x-required": [
        "name",
        "id",
        "description",
        "type"
      ],
      "description": "A curated locality is a ...\n",
      "x-category": "curatedLocality",
      "x-modelType": "model"
    },
    "curatedLocalityRelation": {
      "additionalProperties": false,
      "properties": {
        "target": {
          "type": "object",
          "$ref": "#/definitions/curatedLocality"
        },
        "type": {
          "type": "string",
          "enum": [
            "inside",
            "overlap",
            "border"
          ]
        }
      },
      "x-category": "curatedLocality",
      "x-modelType": "model"
    },
    "taxon": {
      "additionalProperties": false,
      "properties": {
        "parent": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Parent taxon identifier"
            },
            "scientific_name": {
              "type": "string",
              "description": "Parent taxon scientific name"
            },
            "rank": {
              "type": "string",
              "description": "Parent taxon rank"
            }
          },
          "required": [
            "id",
            "scientific_name",
            "rank"
          ]
        },
        "rubin_number": {
          "type": "string",
          "description": "Rubin storage number for the taxon"
        },
        "higherTaxa": {
          "type": "object",
          "properties": {
            "order": {
              "type": "string",
              "description": "Parent order"
            },
            "suborder": {
              "type": "string",
              "description": "Parent suborder"
            },
            "infraorder": {
              "type": "string",
              "description": "Parent infraorder"
            },
            "superfamily": {
              "type": "string",
              "description": "Parent superfamily"
            },
            "family": {
              "type": "string",
              "description": "Parent family"
            },
            "subfamily": {
              "type": "string",
              "description": "Parent subfamily"
            },
            "tribe": {
              "type": "string",
              "description": "Parent tribe"
            },
            "genus": {
              "type": "string",
              "description": "Parent genus"
            },
            "subgenus": {
              "type": "string",
              "description": "Parent subgenus"
            }
          }
        },
        "rank": {
          "type": "string",
          "description": "Taxon rank"
        },
        "scientific_name": {
          "type": "string",
          "description": "Taxon scientific name, binomial if species"
        },
        "author": {
          "type": "string",
          "description": "Taxon author without the year"
        },
        "author_date": {
          "type": "string",
          "description": "Taxon author year"
        },
        "valid_name": {
          "type": "boolean",
          "description": "Is the name taxonomically valid",
          "default": false
        },
        "vernacular_names": {
          "type": "object",
          "properties": {
            "en": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Vernacular (common) English names for the taxon"
              }
            }
          }
        },
        "synonyms": {
          "type": "string",
          "description": "List of synonyms as free-form text"
        },
        "sort_order": {
          "type": "string",
          "description": "Taxonomical sort order code from Mammal Species of the World list"
        }
      },
      "required": [
        "rank",
        "scientific_name",
        "valid_name"
      ],
      "x-category": "other",
      "x-modelType": "model"
    },
    "createIndividualGroupRequest": {
      "additionalProperties": false,
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string",
              "example": "1234"
            },
            "type": {
              "type": "string",
              "default": "individualGroup"
            },
            "attributes": {
              "$ref": "#/definitions/individualGroup"
            }
          }
        }
      }
    },
    "updateIndividualGroupRequest": {
      "additionalProperties": false,
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string",
              "example": "1234"
            },
            "type": {
              "type": "string",
              "default": "individualGroup"
            },
            "attributes": {
              "$ref": "#/definitions/individualGroup"
            }
          }
        }
      }
    },
    "loginUserRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "client_id": {
          "type": "string",
          "example": "dina-reset"
        },
        "grant_type": {
          "type": "string",
          "example": "password"
        },
        "password": {
          "type": "string",
          "example": "xxxxx"
        },
        "username": {
          "type": "string",
          "example": "john doe"
        }
      },
      "required": [
        "client_id",
        "grant_type",
        "password",
        "username"
      ]
    },
    "createCuratedLocalityRequest": {
      "additionalProperties": false,
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string",
              "example": "1234"
            },
            "type": {
              "type": "string",
              "default": "curatedLocality"
            },
            "attributes": {
              "$ref": "#/definitions/curatedLocality"
            }
          }
        }
      }
    },
    "updateCuratedLocalityRequest": {
      "additionalProperties": false,
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string",
              "example": "1234"
            },
            "type": {
              "type": "string",
              "default": "curatedLocality"
            },
            "attributes": {
              "$ref": "#/definitions/curatedLocality"
            }
          }
        }
      }
    },
    "createIndividualGroupResponse": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string",
              "default": "individualGroup"
            },
            "id": {
              "type": "string",
              "example": "1234"
            },
            "attributes": {
              "$ref": "#/definitions/individualGroup"
            },
            "relationships": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "string",
              "format": "uri",
              "example": "https://domain/collections/api/v01/individualGroups"
            }
          }
        },
        "jsonapi": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      }
    },
    "updateIndividualGroupResponse": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string",
              "default": "individualGroup"
            },
            "id": {
              "type": "string",
              "example": "1234"
            },
            "attributes": {
              "$ref": "#/definitions/individualGroup"
            },
            "relationships": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "string",
              "format": "uri",
              "example": "https://domain/collections/api/v01/individualGroups/{id}"
            }
          }
        },
        "jsonapi": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      }
    },
    "getIndividualGroupsResponse": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "additionalProperties": false,
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "default": "individualGroup"
              },
              "id": {
                "type": "string",
                "example": "1234"
              },
              "attributes": {
                "$ref": "#/definitions/individualGroup"
              },
              "relationships": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "string",
              "format": "uri",
              "example": "https://domain/collections/api/v01/individualGroups"
            }
          }
        },
        "jsonapi": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      }
    },
    "getUserResponse": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "email": {
          "type": "string",
          "example": "john.doe@example.com"
        },
        "family_name": {
          "type": "string",
          "example": "Doe"
        },
        "given_name": {
          "type": "string",
          "example": "John"
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "preferred_username": {
          "type": "string",
          "example": "john doe"
        },
        "sub": {
          "type": "string",
          "example": "xxxx"
        }
      },
      "required": [
        "email",
        "preferred_username"
      ]
    },
    "loginUserResponse": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "access_token": {
          "type": "string",
          "example": "xxxx"
        },
        "expires_in": {
          "type": "integer",
          "example": 300
        },
        "not-before-policy": {
          "type": "integer",
          "example": 0
        },
        "refresh_expires_in": {
          "type": "integer",
          "example": 1800
        },
        "refresh_token": {
          "type": "string",
          "example": "xxxx"
        },
        "session_state": {
          "type": "string",
          "example": "bearer"
        },
        "token_type": {
          "type": "string",
          "example": "xxxx"
        }
      },
      "required": [
        "access_token"
      ]
    },
    "createCuratedLocalityResponse": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string",
              "default": "curatedLocality"
            },
            "id": {
              "type": "string",
              "example": "1234"
            },
            "attributes": {
              "$ref": "#/definitions/curatedLocality"
            },
            "relationships": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "string",
              "format": "uri",
              "example": "https://domain/localities/api/v01/curatedLocality"
            }
          }
        },
        "jsonapi": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      }
    },
    "getCuratedLocalityResponse": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string",
              "default": "curatedLocality"
            },
            "id": {
              "type": "string",
              "example": "1234"
            },
            "attributes": {
              "$ref": "#/definitions/curatedLocality"
            },
            "relationships": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "string",
              "format": "uri",
              "example": "https://domain/localities/api/v01/curatedLocality/{id}"
            }
          }
        },
        "jsonapi": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      }
    },
    "getCuratedLocalityByVersionResponse": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string",
              "default": "curatedLocality"
            },
            "id": {
              "type": "string",
              "example": "1234"
            },
            "attributes": {
              "$ref": "#/definitions/curatedLocality"
            },
            "relationships": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "string",
              "format": "uri",
              "example": "https://domain/localities/api/v01/curatedLocality/{id}/versions/{versionId}"
            }
          }
        },
        "jsonapi": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      }
    },
    "updateCuratedLocalityResponse": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string",
              "default": "curatedLocality"
            },
            "id": {
              "type": "string",
              "example": "1234"
            },
            "attributes": {
              "$ref": "#/definitions/curatedLocality"
            },
            "relationships": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "string",
              "format": "uri",
              "example": "https://domain/localities/api/v01/curatedLocality/{id}"
            }
          }
        },
        "jsonapi": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      }
    },
    "getTaxaByNameResponse": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "additionalProperties": false,
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "default": "taxon"
              },
              "id": {
                "type": "string",
                "example": "1234"
              },
              "attributes": {
                "$ref": "#/definitions/taxon"
              },
              "relationships": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "string",
              "format": "uri",
              "example": "https://domain/taxon"
            }
          }
        },
        "jsonapi": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      }
    },
    "getTaxonByIdResponse": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string",
              "default": "taxon"
            },
            "id": {
              "type": "string",
              "example": "1234"
            },
            "attributes": {
              "$ref": "#/definitions/taxon"
            },
            "relationships": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "string",
              "format": "uri",
              "example": "https://domain/taxon/{id}"
            }
          }
        },
        "jsonapi": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      }
    }
  },
  "paths": {
    "/collections/api/v01/individualGroups": {
      "post": {
        "operationId": "createIndividualGroup",
        "parameters": [
          {
            "in": "body",
            "name": "createIndividualGroupRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createIndividualGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/createIndividualGroupResponse"
            }
          }
        },
        "summary": "Create an individual group and a catalogUnit if not existing",
        "tags": [
          "collectionsApi"
        ]
      },
      "get": {
        "operationId": "getIndividualGroups",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/getIndividualGroupsResponse"
            }
          }
        },
        "summary": "Finds individualGroups",
        "tags": [
          "collectionsApi"
        ]
      }
    },
    "/collections/api/v01/individualGroups/{id}": {
      "put": {
        "operationId": "updateIndividualGroup",
        "parameters": [
          {
            "in": "body",
            "name": "updateIndividualGroupRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateIndividualGroupRequest"
            }
          },
          {
            "description": "individualGroup id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/updateIndividualGroupResponse"
            }
          }
        },
        "summary": "Update an individual group by id",
        "tags": [
          "collectionsApi"
        ]
      }
    },
    "/auth/realms/dina/protocol/openid-connect/userInfo": {
      "get": {
        "operationId": "getUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/getUserResponse"
            }
          }
        },
        "summary": "Gets user object",
        "tags": [
          "authApi"
        ]
      }
    },
    "/auth/realms/dina/protocol/openid-connect/token": {
      "post": {
        "operationId": "loginUser",
        "parameters": [
          {
            "in": "body",
            "name": "loginUserRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/loginUserResponse"
            }
          }
        },
        "summary": "Gets user token",
        "tags": [
          "authApi"
        ]
      }
    },
    "/localities/api/v01/curatedLocality": {
      "post": {
        "operationId": "createCuratedLocality",
        "parameters": [
          {
            "in": "body",
            "name": "createCuratedLocalityRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createCuratedLocalityRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/createCuratedLocalityResponse"
            }
          }
        },
        "summary": "Create a curatedLocality",
        "tags": [
          "localityApi"
        ]
      }
    },
    "/localities/api/v01/curatedLocality/{id}": {
      "get": {
        "operationId": "getCuratedLocality",
        "parameters": [
          {
            "description": "curatedLocality id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/getCuratedLocalityResponse"
            }
          }
        },
        "summary": "Find latest version of a curatedLocality",
        "tags": [
          "localityApi"
        ]
      },
      "put": {
        "operationId": "updateCuratedLocality",
        "parameters": [
          {
            "in": "body",
            "name": "updateCuratedLocalityRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateCuratedLocalityRequest"
            }
          },
          {
            "description": "curatedLocality id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/updateCuratedLocalityResponse"
            }
          }
        },
        "summary": "Update an curatedLocality id",
        "tags": [
          "localityApi"
        ]
      }
    },
    "/localities/api/v01/curatedLocality/{id}/versions/{versionId}": {
      "get": {
        "operationId": "getCuratedLocalityByVersion",
        "parameters": [
          {
            "description": "curatedLocality id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "curatedLocality versionId",
            "in": "path",
            "name": "versionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/getCuratedLocalityByVersionResponse"
            }
          }
        },
        "summary": "Find a curatedLocality by version",
        "tags": [
          "localityApi"
        ]
      }
    },
    "/taxon": {
      "get": {
        "operationId": "getTaxaByName",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/getTaxaByNameResponse"
            }
          }
        },
        "summary": "Fetches taxa by name",
        "tags": [
          "slimTaxonomyApi"
        ]
      }
    },
    "/taxon/{id}": {
      "get": {
        "operationId": "getTaxonById",
        "parameters": [
          {
            "description": "taxon id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/getTaxonByIdResponse"
            }
          }
        },
        "summary": "Fetches taxon by id",
        "tags": [
          "slimTaxonomyApi"
        ]
      }
    }
  }
}