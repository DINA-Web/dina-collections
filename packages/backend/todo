



* rename mapFunction to mapFunction in rebuildView and stuff
* Add check that model have required method in controller
* Rename aggregationFunction and filterFunction to [...]Name
* Make sure meta is passed on in sane way








- Create all new functions in the service
* Remove all not needed data (keep identifiers and locations)

* create possibility to pass elastic mapping functions to the model (or through controller)
* use mapping functions when flushing index
* create elastic mappings for identifiers and locations
* test making some aggregations requests
* create filter functions for elastic search to filter for identifiers and locations
* create the build queryWhere (should change name)
* experiment with adding type at the end of the data stored in elastic







Filter
* mapperFunction
* jsFilterfunction
* elasticFilterFunction ?
* elasticMappingBuilder
* elasticAggregationFunction















* Add elastic
** Add create db
** Add models
** Add config





* readd elastic search
** implement filter + query
** Make sure create search specimen works

* create new searchSpecimen filter in common
** Add mapping function as a part of the filters or at least specify depends on mapping func?
** Add functions for sql, js and elastic
** Add aggregation here too? Then add aggregation function for elastic




* implement query in fe crud.


Later:
* Add check in all controllers that the models have the needed methods
* Fix correct object format for new endpoints
* Use deactivated at even in memory tables
* write tests for batchFetch from FE
* Benchmark time in backend for large limit request
* Add get id bigger then instead of limit?
* Move input validation to controller and use resource schema. Remove input and
  output schemas \** Make sure validation is working when doing interServices
  calls
* Use schema interface in frontend and everywhere
* Check where document transformation is done. In controller vs in model. Might make sense to keep in in controller but then make sure view models are going through controller and not model
* fix error when invalid json body


* Go through and add proper error handling and logging everywhere
